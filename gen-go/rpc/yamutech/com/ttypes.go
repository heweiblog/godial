// Autogenerated by Thrift Compiler (0.9.3)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package com

import (
	"bytes"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

var GoUnusedProtection__ int

type RetCode int64

const (
	RetCode_FAIL RetCode = 0
	RetCode_OK   RetCode = 1
)

func (p RetCode) String() string {
	switch p {
	case RetCode_FAIL:
		return "FAIL"
	case RetCode_OK:
		return "OK"
	}
	return "<UNSET>"
}

func RetCodeFromString(s string) (RetCode, error) {
	switch s {
	case "FAIL":
		return RetCode_FAIL, nil
	case "OK":
		return RetCode_OK, nil
	}
	return RetCode(0), fmt.Errorf("not a valid RetCode string")
}

func RetCodePtr(v RetCode) *RetCode { return &v }

func (p RetCode) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *RetCode) UnmarshalText(text []byte) error {
	q, err := RetCodeFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

type TaskEvent int64

const (
	TaskEvent_IDLE     TaskEvent = 0
	TaskEvent_RUNNING  TaskEvent = 1
	TaskEvent_SUSPEND  TaskEvent = 2
	TaskEvent_FINISHED TaskEvent = 3
	TaskEvent_CANCELED TaskEvent = 4
)

func (p TaskEvent) String() string {
	switch p {
	case TaskEvent_IDLE:
		return "IDLE"
	case TaskEvent_RUNNING:
		return "RUNNING"
	case TaskEvent_SUSPEND:
		return "SUSPEND"
	case TaskEvent_FINISHED:
		return "FINISHED"
	case TaskEvent_CANCELED:
		return "CANCELED"
	}
	return "<UNSET>"
}

func TaskEventFromString(s string) (TaskEvent, error) {
	switch s {
	case "IDLE":
		return TaskEvent_IDLE, nil
	case "RUNNING":
		return TaskEvent_RUNNING, nil
	case "SUSPEND":
		return TaskEvent_SUSPEND, nil
	case "FINISHED":
		return TaskEvent_FINISHED, nil
	case "CANCELED":
		return TaskEvent_CANCELED, nil
	}
	return TaskEvent(0), fmt.Errorf("not a valid TaskEvent string")
}

func TaskEventPtr(v TaskEvent) *TaskEvent { return &v }

func (p TaskEvent) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *TaskEvent) UnmarshalText(text []byte) error {
	q, err := TaskEventFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

type DomainType int64

const (
	DomainType_A     DomainType = 1
	DomainType_NS    DomainType = 2
	DomainType_CNAME DomainType = 5
	DomainType_SOA   DomainType = 6
	DomainType_PTR   DomainType = 12
	DomainType_HINFO DomainType = 13
	DomainType_MX    DomainType = 15
	DomainType_TXT   DomainType = 16
	DomainType_AAAA  DomainType = 28
	DomainType_SRV   DomainType = 33
	DomainType_A6    DomainType = 38
	DomainType_ANY   DomainType = 255
)

func (p DomainType) String() string {
	switch p {
	case DomainType_A:
		return "A"
	case DomainType_NS:
		return "NS"
	case DomainType_CNAME:
		return "CNAME"
	case DomainType_SOA:
		return "SOA"
	case DomainType_PTR:
		return "PTR"
	case DomainType_HINFO:
		return "HINFO"
	case DomainType_MX:
		return "MX"
	case DomainType_TXT:
		return "TXT"
	case DomainType_AAAA:
		return "AAAA"
	case DomainType_SRV:
		return "SRV"
	case DomainType_A6:
		return "A6"
	case DomainType_ANY:
		return "ANY"
	}
	return "<UNSET>"
}

func DomainTypeFromString(s string) (DomainType, error) {
	switch s {
	case "A":
		return DomainType_A, nil
	case "NS":
		return DomainType_NS, nil
	case "CNAME":
		return DomainType_CNAME, nil
	case "SOA":
		return DomainType_SOA, nil
	case "PTR":
		return DomainType_PTR, nil
	case "HINFO":
		return DomainType_HINFO, nil
	case "MX":
		return DomainType_MX, nil
	case "TXT":
		return DomainType_TXT, nil
	case "AAAA":
		return DomainType_AAAA, nil
	case "SRV":
		return DomainType_SRV, nil
	case "A6":
		return DomainType_A6, nil
	case "ANY":
		return DomainType_ANY, nil
	}
	return DomainType(0), fmt.Errorf("not a valid DomainType string")
}

func DomainTypePtr(v DomainType) *DomainType { return &v }

func (p DomainType) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *DomainType) UnmarshalText(text []byte) error {
	q, err := DomainTypeFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

type DialMethod int64

const (
	DialMethod_Dig           DialMethod = 0
	DialMethod_DigAndPing    DialMethod = 1
	DialMethod_DigAndHttp    DialMethod = 2
	DialMethod_DigAndWeb     DialMethod = 3
	DialMethod_DigAndVideo   DialMethod = 4
	DialMethod_FocusDomain   DialMethod = 5
	DialMethod_RefreshCache  DialMethod = 6
	DialMethod_DomainSchedul DialMethod = 7
)

func (p DialMethod) String() string {
	switch p {
	case DialMethod_Dig:
		return "Dig"
	case DialMethod_DigAndPing:
		return "DigAndPing"
	case DialMethod_DigAndHttp:
		return "DigAndHttp"
	case DialMethod_DigAndWeb:
		return "DigAndWeb"
	case DialMethod_DigAndVideo:
		return "DigAndVideo"
	case DialMethod_FocusDomain:
		return "FocusDomain"
	case DialMethod_RefreshCache:
		return "RefreshCache"
	case DialMethod_DomainSchedul:
		return "DomainSchedul"
	}
	return "<UNSET>"
}

func DialMethodFromString(s string) (DialMethod, error) {
	switch s {
	case "Dig":
		return DialMethod_Dig, nil
	case "DigAndPing":
		return DialMethod_DigAndPing, nil
	case "DigAndHttp":
		return DialMethod_DigAndHttp, nil
	case "DigAndWeb":
		return DialMethod_DigAndWeb, nil
	case "DigAndVideo":
		return DialMethod_DigAndVideo, nil
	case "FocusDomain":
		return DialMethod_FocusDomain, nil
	case "RefreshCache":
		return DialMethod_RefreshCache, nil
	case "DomainSchedul":
		return DialMethod_DomainSchedul, nil
	}
	return DialMethod(0), fmt.Errorf("not a valid DialMethod string")
}

func DialMethodPtr(v DialMethod) *DialMethod { return &v }

func (p DialMethod) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *DialMethod) UnmarshalText(text []byte) error {
	q, err := DialMethodFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

type FocusDomainResultStatus int64

const (
	FocusDomainResultStatus_noerror  FocusDomainResultStatus = 0
	FocusDomainResultStatus_formerr  FocusDomainResultStatus = 1
	FocusDomainResultStatus_servfail FocusDomainResultStatus = 2
	FocusDomainResultStatus_nxdomain FocusDomainResultStatus = 3
	FocusDomainResultStatus_notimpl  FocusDomainResultStatus = 4
	FocusDomainResultStatus_refused  FocusDomainResultStatus = 5
	FocusDomainResultStatus_others   FocusDomainResultStatus = 6
)

func (p FocusDomainResultStatus) String() string {
	switch p {
	case FocusDomainResultStatus_noerror:
		return "noerror"
	case FocusDomainResultStatus_formerr:
		return "formerr"
	case FocusDomainResultStatus_servfail:
		return "servfail"
	case FocusDomainResultStatus_nxdomain:
		return "nxdomain"
	case FocusDomainResultStatus_notimpl:
		return "notimpl"
	case FocusDomainResultStatus_refused:
		return "refused"
	case FocusDomainResultStatus_others:
		return "others"
	}
	return "<UNSET>"
}

func FocusDomainResultStatusFromString(s string) (FocusDomainResultStatus, error) {
	switch s {
	case "noerror":
		return FocusDomainResultStatus_noerror, nil
	case "formerr":
		return FocusDomainResultStatus_formerr, nil
	case "servfail":
		return FocusDomainResultStatus_servfail, nil
	case "nxdomain":
		return FocusDomainResultStatus_nxdomain, nil
	case "notimpl":
		return FocusDomainResultStatus_notimpl, nil
	case "refused":
		return FocusDomainResultStatus_refused, nil
	case "others":
		return FocusDomainResultStatus_others, nil
	}
	return FocusDomainResultStatus(0), fmt.Errorf("not a valid FocusDomainResultStatus string")
}

func FocusDomainResultStatusPtr(v FocusDomainResultStatus) *FocusDomainResultStatus { return &v }

func (p FocusDomainResultStatus) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *FocusDomainResultStatus) UnmarshalText(text []byte) error {
	q, err := FocusDomainResultStatusFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

type ObjectId string

func ObjectIdPtr(v ObjectId) *ObjectId { return &v }

// Attributes:
//  - ErrorCode
//  - Message
type Xception struct {
	ErrorCode int32  `thrift:"errorCode,1" json:"errorCode"`
	Message   string `thrift:"message,2" json:"message"`
}

func NewXception() *Xception {
	return &Xception{}
}

func (p *Xception) GetErrorCode() int32 {
	return p.ErrorCode
}

func (p *Xception) GetMessage() string {
	return p.Message
}
func (p *Xception) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *Xception) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ErrorCode = v
	}
	return nil
}

func (p *Xception) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Message = v
	}
	return nil
}

func (p *Xception) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Xception"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Xception) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("errorCode", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:errorCode: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ErrorCode)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.errorCode (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:errorCode: ", p), err)
	}
	return err
}

func (p *Xception) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("message", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:message: ", p), err)
	}
	if err := oprot.WriteString(string(p.Message)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.message (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:message: ", p), err)
	}
	return err
}

func (p *Xception) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Xception(%+v)", *p)
}

func (p *Xception) Error() string {
	return p.String()
}

// Attributes:
//  - Version
//  - Addr
type IpAddr struct {
	Version int32  `thrift:"version,1" json:"version"`
	Addr    string `thrift:"addr,2" json:"addr"`
}

func NewIpAddr() *IpAddr {
	return &IpAddr{}
}

func (p *IpAddr) GetVersion() int32 {
	return p.Version
}

func (p *IpAddr) GetAddr() string {
	return p.Addr
}
func (p *IpAddr) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IpAddr) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Version = v
	}
	return nil
}

func (p *IpAddr) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Addr = v
	}
	return nil
}

func (p *IpAddr) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("IpAddr"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IpAddr) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("version", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:version: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Version)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.version (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:version: ", p), err)
	}
	return err
}

func (p *IpAddr) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("addr", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:addr: ", p), err)
	}
	if err := oprot.WriteString(string(p.Addr)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.addr (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:addr: ", p), err)
	}
	return err
}

func (p *IpAddr) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IpAddr(%+v)", *p)
}

// Attributes:
//  - Event
//  - Batchno
//  - Percent
//  - DialLocalRate
//  - DialAvgDelay
//  - DetectLocalRate
//  - DetectAvailRate
//  - DetectAvgDelay
//  - TotalAvgDelay
//  - Closed
type TaskProcessArgs_ struct {
	Event           TaskEvent `thrift:"event,1" json:"event"`
	Batchno         string    `thrift:"batchno,2" json:"batchno"`
	Percent         float64   `thrift:"percent,3" json:"percent"`
	DialLocalRate   float64   `thrift:"dialLocalRate,4" json:"dialLocalRate"`
	DialAvgDelay    int32     `thrift:"dialAvgDelay,5" json:"dialAvgDelay"`
	DetectLocalRate float64   `thrift:"detectLocalRate,6" json:"detectLocalRate"`
	DetectAvailRate float64   `thrift:"detectAvailRate,7" json:"detectAvailRate"`
	DetectAvgDelay  int32     `thrift:"detectAvgDelay,8" json:"detectAvgDelay"`
	TotalAvgDelay   int32     `thrift:"totalAvgDelay,9" json:"totalAvgDelay"`
	Closed          bool      `thrift:"closed,10" json:"closed"`
}

func NewTaskProcessArgs_() *TaskProcessArgs_ {
	return &TaskProcessArgs_{}
}

func (p *TaskProcessArgs_) GetEvent() TaskEvent {
	return p.Event
}

func (p *TaskProcessArgs_) GetBatchno() string {
	return p.Batchno
}

func (p *TaskProcessArgs_) GetPercent() float64 {
	return p.Percent
}

func (p *TaskProcessArgs_) GetDialLocalRate() float64 {
	return p.DialLocalRate
}

func (p *TaskProcessArgs_) GetDialAvgDelay() int32 {
	return p.DialAvgDelay
}

func (p *TaskProcessArgs_) GetDetectLocalRate() float64 {
	return p.DetectLocalRate
}

func (p *TaskProcessArgs_) GetDetectAvailRate() float64 {
	return p.DetectAvailRate
}

func (p *TaskProcessArgs_) GetDetectAvgDelay() int32 {
	return p.DetectAvgDelay
}

func (p *TaskProcessArgs_) GetTotalAvgDelay() int32 {
	return p.TotalAvgDelay
}

func (p *TaskProcessArgs_) GetClosed() bool {
	return p.Closed
}
func (p *TaskProcessArgs_) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.readField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.readField10(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TaskProcessArgs_) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := TaskEvent(v)
		p.Event = temp
	}
	return nil
}

func (p *TaskProcessArgs_) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Batchno = v
	}
	return nil
}

func (p *TaskProcessArgs_) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Percent = v
	}
	return nil
}

func (p *TaskProcessArgs_) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.DialLocalRate = v
	}
	return nil
}

func (p *TaskProcessArgs_) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.DialAvgDelay = v
	}
	return nil
}

func (p *TaskProcessArgs_) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.DetectLocalRate = v
	}
	return nil
}

func (p *TaskProcessArgs_) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.DetectAvailRate = v
	}
	return nil
}

func (p *TaskProcessArgs_) readField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.DetectAvgDelay = v
	}
	return nil
}

func (p *TaskProcessArgs_) readField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 9: ", err)
	} else {
		p.TotalAvgDelay = v
	}
	return nil
}

func (p *TaskProcessArgs_) readField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 10: ", err)
	} else {
		p.Closed = v
	}
	return nil
}

func (p *TaskProcessArgs_) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TaskProcessArgs"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TaskProcessArgs_) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("event", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:event: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Event)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.event (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:event: ", p), err)
	}
	return err
}

func (p *TaskProcessArgs_) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("batchno", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:batchno: ", p), err)
	}
	if err := oprot.WriteString(string(p.Batchno)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.batchno (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:batchno: ", p), err)
	}
	return err
}

func (p *TaskProcessArgs_) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("percent", thrift.DOUBLE, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:percent: ", p), err)
	}
	if err := oprot.WriteDouble(float64(p.Percent)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.percent (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:percent: ", p), err)
	}
	return err
}

func (p *TaskProcessArgs_) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("dialLocalRate", thrift.DOUBLE, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:dialLocalRate: ", p), err)
	}
	if err := oprot.WriteDouble(float64(p.DialLocalRate)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.dialLocalRate (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:dialLocalRate: ", p), err)
	}
	return err
}

func (p *TaskProcessArgs_) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("dialAvgDelay", thrift.I32, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:dialAvgDelay: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.DialAvgDelay)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.dialAvgDelay (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:dialAvgDelay: ", p), err)
	}
	return err
}

func (p *TaskProcessArgs_) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("detectLocalRate", thrift.DOUBLE, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:detectLocalRate: ", p), err)
	}
	if err := oprot.WriteDouble(float64(p.DetectLocalRate)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.detectLocalRate (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:detectLocalRate: ", p), err)
	}
	return err
}

func (p *TaskProcessArgs_) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("detectAvailRate", thrift.DOUBLE, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:detectAvailRate: ", p), err)
	}
	if err := oprot.WriteDouble(float64(p.DetectAvailRate)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.detectAvailRate (7) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:detectAvailRate: ", p), err)
	}
	return err
}

func (p *TaskProcessArgs_) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("detectAvgDelay", thrift.I32, 8); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:detectAvgDelay: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.DetectAvgDelay)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.detectAvgDelay (8) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 8:detectAvgDelay: ", p), err)
	}
	return err
}

func (p *TaskProcessArgs_) writeField9(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("totalAvgDelay", thrift.I32, 9); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:totalAvgDelay: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.TotalAvgDelay)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.totalAvgDelay (9) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 9:totalAvgDelay: ", p), err)
	}
	return err
}

func (p *TaskProcessArgs_) writeField10(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("closed", thrift.BOOL, 10); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:closed: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.Closed)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.closed (10) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 10:closed: ", p), err)
	}
	return err
}

func (p *TaskProcessArgs_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TaskProcessArgs_(%+v)", *p)
}

// Attributes:
//  - Dname
//  - Dtype
type DomainRecord struct {
	Dname string     `thrift:"dname,1" json:"dname"`
	Dtype DomainType `thrift:"dtype,2" json:"dtype"`
}

func NewDomainRecord() *DomainRecord {
	return &DomainRecord{}
}

func (p *DomainRecord) GetDname() string {
	return p.Dname
}

func (p *DomainRecord) GetDtype() DomainType {
	return p.Dtype
}
func (p *DomainRecord) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *DomainRecord) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Dname = v
	}
	return nil
}

func (p *DomainRecord) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := DomainType(v)
		p.Dtype = temp
	}
	return nil
}

func (p *DomainRecord) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("DomainRecord"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *DomainRecord) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("dname", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:dname: ", p), err)
	}
	if err := oprot.WriteString(string(p.Dname)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.dname (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:dname: ", p), err)
	}
	return err
}

func (p *DomainRecord) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("dtype", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:dtype: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Dtype)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.dtype (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:dtype: ", p), err)
	}
	return err
}

func (p *DomainRecord) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DomainRecord(%+v)", *p)
}

// Attributes:
//  - URL
//  - Available
//  - Speed
type VideoResult_ struct {
	URL       string `thrift:"url,1" json:"url"`
	Available bool   `thrift:"available,2" json:"available"`
	Speed     int32  `thrift:"speed,3" json:"speed"`
}

func NewVideoResult_() *VideoResult_ {
	return &VideoResult_{}
}

func (p *VideoResult_) GetURL() string {
	return p.URL
}

func (p *VideoResult_) GetAvailable() bool {
	return p.Available
}

func (p *VideoResult_) GetSpeed() int32 {
	return p.Speed
}
func (p *VideoResult_) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *VideoResult_) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.URL = v
	}
	return nil
}

func (p *VideoResult_) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Available = v
	}
	return nil
}

func (p *VideoResult_) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Speed = v
	}
	return nil
}

func (p *VideoResult_) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("VideoResult"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *VideoResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("url", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:url: ", p), err)
	}
	if err := oprot.WriteString(string(p.URL)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.url (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:url: ", p), err)
	}
	return err
}

func (p *VideoResult_) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("available", thrift.BOOL, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:available: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.Available)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.available (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:available: ", p), err)
	}
	return err
}

func (p *VideoResult_) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("speed", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:speed: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Speed)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.speed (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:speed: ", p), err)
	}
	return err
}

func (p *VideoResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoResult_(%+v)", *p)
}

// Attributes:
//  - IP
//  - Local
//  - Delay
//  - Available
//  - VideoResults
//  - Downloadspeed
type IpResult_ struct {
	IP            *IpAddr         `thrift:"ip,1" json:"ip"`
	Local         bool            `thrift:"local,2" json:"local"`
	Delay         int32           `thrift:"delay,3" json:"delay"`
	Available     bool            `thrift:"available,4" json:"available"`
	VideoResults  []*VideoResult_ `thrift:"videoResults,5" json:"videoResults"`
	Downloadspeed int32           `thrift:"downloadspeed,6" json:"downloadspeed"`
}

func NewIpResult_() *IpResult_ {
	return &IpResult_{}
}

var IpResult__IP_DEFAULT *IpAddr

func (p *IpResult_) GetIP() *IpAddr {
	if !p.IsSetIP() {
		return IpResult__IP_DEFAULT
	}
	return p.IP
}

func (p *IpResult_) GetLocal() bool {
	return p.Local
}

func (p *IpResult_) GetDelay() int32 {
	return p.Delay
}

func (p *IpResult_) GetAvailable() bool {
	return p.Available
}

func (p *IpResult_) GetVideoResults() []*VideoResult_ {
	return p.VideoResults
}

func (p *IpResult_) GetDownloadspeed() int32 {
	return p.Downloadspeed
}
func (p *IpResult_) IsSetIP() bool {
	return p.IP != nil
}

func (p *IpResult_) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IpResult_) readField1(iprot thrift.TProtocol) error {
	p.IP = &IpAddr{}
	if err := p.IP.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.IP), err)
	}
	return nil
}

func (p *IpResult_) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Local = v
	}
	return nil
}

func (p *IpResult_) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Delay = v
	}
	return nil
}

func (p *IpResult_) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Available = v
	}
	return nil
}

func (p *IpResult_) readField5(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*VideoResult_, 0, size)
	p.VideoResults = tSlice
	for i := 0; i < size; i++ {
		_elem0 := &VideoResult_{}
		if err := _elem0.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem0), err)
		}
		p.VideoResults = append(p.VideoResults, _elem0)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *IpResult_) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.Downloadspeed = v
	}
	return nil
}

func (p *IpResult_) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("IpResult"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IpResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ip", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ip: ", p), err)
	}
	if err := p.IP.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.IP), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ip: ", p), err)
	}
	return err
}

func (p *IpResult_) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("local", thrift.BOOL, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:local: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.Local)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.local (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:local: ", p), err)
	}
	return err
}

func (p *IpResult_) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("delay", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:delay: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Delay)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.delay (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:delay: ", p), err)
	}
	return err
}

func (p *IpResult_) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("available", thrift.BOOL, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:available: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.Available)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.available (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:available: ", p), err)
	}
	return err
}

func (p *IpResult_) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("videoResults", thrift.LIST, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:videoResults: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.VideoResults)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.VideoResults {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:videoResults: ", p), err)
	}
	return err
}

func (p *IpResult_) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("downloadspeed", thrift.I32, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:downloadspeed: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Downloadspeed)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.downloadspeed (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:downloadspeed: ", p), err)
	}
	return err
}

func (p *IpResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IpResult_(%+v)", *p)
}

// Attributes:
//  - Priority
//  - Value
type FocusDomainResultItem struct {
	Priority int32  `thrift:"priority,1" json:"priority"`
	Value    string `thrift:"value,2" json:"value"`
}

func NewFocusDomainResultItem() *FocusDomainResultItem {
	return &FocusDomainResultItem{}
}

func (p *FocusDomainResultItem) GetPriority() int32 {
	return p.Priority
}

func (p *FocusDomainResultItem) GetValue() string {
	return p.Value
}
func (p *FocusDomainResultItem) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FocusDomainResultItem) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Priority = v
	}
	return nil
}

func (p *FocusDomainResultItem) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Value = v
	}
	return nil
}

func (p *FocusDomainResultItem) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("FocusDomainResultItem"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FocusDomainResultItem) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("priority", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:priority: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Priority)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.priority (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:priority: ", p), err)
	}
	return err
}

func (p *FocusDomainResultItem) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("value", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:value: ", p), err)
	}
	if err := oprot.WriteString(string(p.Value)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.value (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:value: ", p), err)
	}
	return err
}

func (p *FocusDomainResultItem) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FocusDomainResultItem(%+v)", *p)
}

// Attributes:
//  - Status
//  - Delay
//  - Results
type FocusDomainResult_ struct {
	Status  FocusDomainResultStatus  `thrift:"status,1" json:"status"`
	Delay   int32                    `thrift:"delay,2" json:"delay"`
	Results []*FocusDomainResultItem `thrift:"results,3" json:"results"`
}

func NewFocusDomainResult_() *FocusDomainResult_ {
	return &FocusDomainResult_{}
}

func (p *FocusDomainResult_) GetStatus() FocusDomainResultStatus {
	return p.Status
}

func (p *FocusDomainResult_) GetDelay() int32 {
	return p.Delay
}

func (p *FocusDomainResult_) GetResults() []*FocusDomainResultItem {
	return p.Results
}
func (p *FocusDomainResult_) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FocusDomainResult_) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := FocusDomainResultStatus(v)
		p.Status = temp
	}
	return nil
}

func (p *FocusDomainResult_) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Delay = v
	}
	return nil
}

func (p *FocusDomainResult_) readField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*FocusDomainResultItem, 0, size)
	p.Results = tSlice
	for i := 0; i < size; i++ {
		_elem1 := &FocusDomainResultItem{}
		if err := _elem1.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem1), err)
		}
		p.Results = append(p.Results, _elem1)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *FocusDomainResult_) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("FocusDomainResult"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FocusDomainResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("status", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Status)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.status (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err)
	}
	return err
}

func (p *FocusDomainResult_) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("delay", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:delay: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Delay)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.delay (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:delay: ", p), err)
	}
	return err
}

func (p *FocusDomainResult_) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("results", thrift.LIST, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:results: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Results)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Results {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:results: ", p), err)
	}
	return err
}

func (p *FocusDomainResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FocusDomainResult_(%+v)", *p)
}

// Attributes:
//  - Dname
//  - Dtype
//  - Available
//  - Results
//  - Local
//  - Delay
//  - Fdr
type DomainResult_ struct {
	Dname     string              `thrift:"dname,1" json:"dname"`
	Dtype     DomainType          `thrift:"dtype,2" json:"dtype"`
	Available bool                `thrift:"available,3" json:"available"`
	Results   []*IpResult_        `thrift:"results,4" json:"results"`
	Local     bool                `thrift:"local,5" json:"local"`
	Delay     int32               `thrift:"delay,6" json:"delay"`
	Fdr       *FocusDomainResult_ `thrift:"fdr,7" json:"fdr"`
}

func NewDomainResult_() *DomainResult_ {
	return &DomainResult_{}
}

func (p *DomainResult_) GetDname() string {
	return p.Dname
}

func (p *DomainResult_) GetDtype() DomainType {
	return p.Dtype
}

func (p *DomainResult_) GetAvailable() bool {
	return p.Available
}

func (p *DomainResult_) GetResults() []*IpResult_ {
	return p.Results
}

func (p *DomainResult_) GetLocal() bool {
	return p.Local
}

func (p *DomainResult_) GetDelay() int32 {
	return p.Delay
}

var DomainResult__Fdr_DEFAULT *FocusDomainResult_

func (p *DomainResult_) GetFdr() *FocusDomainResult_ {
	if !p.IsSetFdr() {
		return DomainResult__Fdr_DEFAULT
	}
	return p.Fdr
}
func (p *DomainResult_) IsSetFdr() bool {
	return p.Fdr != nil
}

func (p *DomainResult_) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *DomainResult_) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Dname = v
	}
	return nil
}

func (p *DomainResult_) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := DomainType(v)
		p.Dtype = temp
	}
	return nil
}

func (p *DomainResult_) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Available = v
	}
	return nil
}

func (p *DomainResult_) readField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*IpResult_, 0, size)
	p.Results = tSlice
	for i := 0; i < size; i++ {
		_elem2 := &IpResult_{}
		if err := _elem2.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem2), err)
		}
		p.Results = append(p.Results, _elem2)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *DomainResult_) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.Local = v
	}
	return nil
}

func (p *DomainResult_) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.Delay = v
	}
	return nil
}

func (p *DomainResult_) readField7(iprot thrift.TProtocol) error {
	p.Fdr = &FocusDomainResult_{}
	if err := p.Fdr.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Fdr), err)
	}
	return nil
}

func (p *DomainResult_) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("DomainResult"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *DomainResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("dname", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:dname: ", p), err)
	}
	if err := oprot.WriteString(string(p.Dname)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.dname (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:dname: ", p), err)
	}
	return err
}

func (p *DomainResult_) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("dtype", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:dtype: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Dtype)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.dtype (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:dtype: ", p), err)
	}
	return err
}

func (p *DomainResult_) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("available", thrift.BOOL, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:available: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.Available)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.available (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:available: ", p), err)
	}
	return err
}

func (p *DomainResult_) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("results", thrift.LIST, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:results: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Results)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Results {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:results: ", p), err)
	}
	return err
}

func (p *DomainResult_) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("local", thrift.BOOL, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:local: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.Local)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.local (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:local: ", p), err)
	}
	return err
}

func (p *DomainResult_) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("delay", thrift.I32, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:delay: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Delay)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.delay (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:delay: ", p), err)
	}
	return err
}

func (p *DomainResult_) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("fdr", thrift.STRUCT, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:fdr: ", p), err)
	}
	if err := p.Fdr.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Fdr), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:fdr: ", p), err)
	}
	return err
}

func (p *DomainResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DomainResult_(%+v)", *p)
}

// Attributes:
//  - Version
//  - IP
//  - Mask
//  - Carrier
//  - Local
type IpSec struct {
	Version int32   `thrift:"version,1" json:"version"`
	IP      *IpAddr `thrift:"ip,2" json:"ip"`
	Mask    int32   `thrift:"mask,3" json:"mask"`
	Carrier string  `thrift:"carrier,4" json:"carrier"`
	Local   bool    `thrift:"local,5" json:"local"`
}

func NewIpSec() *IpSec {
	return &IpSec{}
}

func (p *IpSec) GetVersion() int32 {
	return p.Version
}

var IpSec_IP_DEFAULT *IpAddr

func (p *IpSec) GetIP() *IpAddr {
	if !p.IsSetIP() {
		return IpSec_IP_DEFAULT
	}
	return p.IP
}

func (p *IpSec) GetMask() int32 {
	return p.Mask
}

func (p *IpSec) GetCarrier() string {
	return p.Carrier
}

func (p *IpSec) GetLocal() bool {
	return p.Local
}
func (p *IpSec) IsSetIP() bool {
	return p.IP != nil
}

func (p *IpSec) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IpSec) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Version = v
	}
	return nil
}

func (p *IpSec) readField2(iprot thrift.TProtocol) error {
	p.IP = &IpAddr{}
	if err := p.IP.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.IP), err)
	}
	return nil
}

func (p *IpSec) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Mask = v
	}
	return nil
}

func (p *IpSec) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Carrier = v
	}
	return nil
}

func (p *IpSec) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.Local = v
	}
	return nil
}

func (p *IpSec) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("IpSec"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IpSec) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("version", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:version: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Version)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.version (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:version: ", p), err)
	}
	return err
}

func (p *IpSec) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ip", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ip: ", p), err)
	}
	if err := p.IP.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.IP), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ip: ", p), err)
	}
	return err
}

func (p *IpSec) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("mask", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:mask: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Mask)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.mask (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:mask: ", p), err)
	}
	return err
}

func (p *IpSec) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("carrier", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:carrier: ", p), err)
	}
	if err := oprot.WriteString(string(p.Carrier)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.carrier (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:carrier: ", p), err)
	}
	return err
}

func (p *IpSec) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("local", thrift.BOOL, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:local: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.Local)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.local (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:local: ", p), err)
	}
	return err
}

func (p *IpSec) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IpSec(%+v)", *p)
}

// Attributes:
//  - Targetid
//  - Taskid
//  - Batchno
//  - Available
//  - Local
//  - Delay
//  - Results
//  - AvgIpDelay
//  - AvgVideoSpeed
//  - TotalDelay
//  - Updated
type DomainTarget struct {
	Targetid      string       `thrift:"targetid,1" json:"targetid"`
	Taskid        string       `thrift:"taskid,2" json:"taskid"`
	Batchno       string       `thrift:"batchno,3" json:"batchno"`
	Available     bool         `thrift:"available,4" json:"available"`
	Local         bool         `thrift:"local,5" json:"local"`
	Delay         int32        `thrift:"delay,6" json:"delay"`
	Results       []*IpResult_ `thrift:"results,7" json:"results"`
	AvgIpDelay    int32        `thrift:"avgIpDelay,8" json:"avgIpDelay"`
	AvgVideoSpeed int32        `thrift:"avgVideoSpeed,9" json:"avgVideoSpeed"`
	TotalDelay    int32        `thrift:"totalDelay,10" json:"totalDelay"`
	Updated       int64        `thrift:"updated,11" json:"updated"`
}

func NewDomainTarget() *DomainTarget {
	return &DomainTarget{}
}

func (p *DomainTarget) GetTargetid() string {
	return p.Targetid
}

func (p *DomainTarget) GetTaskid() string {
	return p.Taskid
}

func (p *DomainTarget) GetBatchno() string {
	return p.Batchno
}

func (p *DomainTarget) GetAvailable() bool {
	return p.Available
}

func (p *DomainTarget) GetLocal() bool {
	return p.Local
}

func (p *DomainTarget) GetDelay() int32 {
	return p.Delay
}

func (p *DomainTarget) GetResults() []*IpResult_ {
	return p.Results
}

func (p *DomainTarget) GetAvgIpDelay() int32 {
	return p.AvgIpDelay
}

func (p *DomainTarget) GetAvgVideoSpeed() int32 {
	return p.AvgVideoSpeed
}

func (p *DomainTarget) GetTotalDelay() int32 {
	return p.TotalDelay
}

func (p *DomainTarget) GetUpdated() int64 {
	return p.Updated
}
func (p *DomainTarget) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.readField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.readField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.readField11(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *DomainTarget) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Targetid = v
	}
	return nil
}

func (p *DomainTarget) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Taskid = v
	}
	return nil
}

func (p *DomainTarget) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Batchno = v
	}
	return nil
}

func (p *DomainTarget) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Available = v
	}
	return nil
}

func (p *DomainTarget) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.Local = v
	}
	return nil
}

func (p *DomainTarget) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.Delay = v
	}
	return nil
}

func (p *DomainTarget) readField7(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*IpResult_, 0, size)
	p.Results = tSlice
	for i := 0; i < size; i++ {
		_elem3 := &IpResult_{}
		if err := _elem3.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem3), err)
		}
		p.Results = append(p.Results, _elem3)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *DomainTarget) readField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.AvgIpDelay = v
	}
	return nil
}

func (p *DomainTarget) readField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 9: ", err)
	} else {
		p.AvgVideoSpeed = v
	}
	return nil
}

func (p *DomainTarget) readField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 10: ", err)
	} else {
		p.TotalDelay = v
	}
	return nil
}

func (p *DomainTarget) readField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 11: ", err)
	} else {
		p.Updated = v
	}
	return nil
}

func (p *DomainTarget) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("DomainTarget"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *DomainTarget) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("targetid", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:targetid: ", p), err)
	}
	if err := oprot.WriteString(string(p.Targetid)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.targetid (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:targetid: ", p), err)
	}
	return err
}

func (p *DomainTarget) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("taskid", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:taskid: ", p), err)
	}
	if err := oprot.WriteString(string(p.Taskid)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.taskid (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:taskid: ", p), err)
	}
	return err
}

func (p *DomainTarget) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("batchno", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:batchno: ", p), err)
	}
	if err := oprot.WriteString(string(p.Batchno)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.batchno (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:batchno: ", p), err)
	}
	return err
}

func (p *DomainTarget) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("available", thrift.BOOL, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:available: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.Available)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.available (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:available: ", p), err)
	}
	return err
}

func (p *DomainTarget) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("local", thrift.BOOL, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:local: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.Local)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.local (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:local: ", p), err)
	}
	return err
}

func (p *DomainTarget) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("delay", thrift.I32, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:delay: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Delay)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.delay (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:delay: ", p), err)
	}
	return err
}

func (p *DomainTarget) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("results", thrift.LIST, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:results: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Results)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Results {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:results: ", p), err)
	}
	return err
}

func (p *DomainTarget) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("avgIpDelay", thrift.I32, 8); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:avgIpDelay: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.AvgIpDelay)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.avgIpDelay (8) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 8:avgIpDelay: ", p), err)
	}
	return err
}

func (p *DomainTarget) writeField9(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("avgVideoSpeed", thrift.I32, 9); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:avgVideoSpeed: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.AvgVideoSpeed)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.avgVideoSpeed (9) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 9:avgVideoSpeed: ", p), err)
	}
	return err
}

func (p *DomainTarget) writeField10(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("totalDelay", thrift.I32, 10); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:totalDelay: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.TotalDelay)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.totalDelay (10) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 10:totalDelay: ", p), err)
	}
	return err
}

func (p *DomainTarget) writeField11(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("updated", thrift.I64, 11); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:updated: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.Updated)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.updated (11) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 11:updated: ", p), err)
	}
	return err
}

func (p *DomainTarget) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DomainTarget(%+v)", *p)
}

// Attributes:
//  - Dname
//  - Dtype
//  - Home
//  - Suggest
//  - Totals
type AnalysisResult_ struct {
	Dname   string          `thrift:"dname,1" json:"dname"`
	Dtype   DomainType      `thrift:"dtype,2" json:"dtype"`
	Home    *DomainTarget   `thrift:"home,3" json:"home"`
	Suggest *DomainTarget   `thrift:"suggest,4" json:"suggest"`
	Totals  []*DomainTarget `thrift:"totals,5" json:"totals"`
}

func NewAnalysisResult_() *AnalysisResult_ {
	return &AnalysisResult_{}
}

func (p *AnalysisResult_) GetDname() string {
	return p.Dname
}

func (p *AnalysisResult_) GetDtype() DomainType {
	return p.Dtype
}

var AnalysisResult__Home_DEFAULT *DomainTarget

func (p *AnalysisResult_) GetHome() *DomainTarget {
	if !p.IsSetHome() {
		return AnalysisResult__Home_DEFAULT
	}
	return p.Home
}

var AnalysisResult__Suggest_DEFAULT *DomainTarget

func (p *AnalysisResult_) GetSuggest() *DomainTarget {
	if !p.IsSetSuggest() {
		return AnalysisResult__Suggest_DEFAULT
	}
	return p.Suggest
}

func (p *AnalysisResult_) GetTotals() []*DomainTarget {
	return p.Totals
}
func (p *AnalysisResult_) IsSetHome() bool {
	return p.Home != nil
}

func (p *AnalysisResult_) IsSetSuggest() bool {
	return p.Suggest != nil
}

func (p *AnalysisResult_) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AnalysisResult_) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Dname = v
	}
	return nil
}

func (p *AnalysisResult_) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := DomainType(v)
		p.Dtype = temp
	}
	return nil
}

func (p *AnalysisResult_) readField3(iprot thrift.TProtocol) error {
	p.Home = &DomainTarget{}
	if err := p.Home.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Home), err)
	}
	return nil
}

func (p *AnalysisResult_) readField4(iprot thrift.TProtocol) error {
	p.Suggest = &DomainTarget{}
	if err := p.Suggest.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Suggest), err)
	}
	return nil
}

func (p *AnalysisResult_) readField5(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*DomainTarget, 0, size)
	p.Totals = tSlice
	for i := 0; i < size; i++ {
		_elem4 := &DomainTarget{}
		if err := _elem4.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem4), err)
		}
		p.Totals = append(p.Totals, _elem4)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *AnalysisResult_) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("AnalysisResult"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AnalysisResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("dname", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:dname: ", p), err)
	}
	if err := oprot.WriteString(string(p.Dname)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.dname (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:dname: ", p), err)
	}
	return err
}

func (p *AnalysisResult_) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("dtype", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:dtype: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Dtype)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.dtype (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:dtype: ", p), err)
	}
	return err
}

func (p *AnalysisResult_) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("home", thrift.STRUCT, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:home: ", p), err)
	}
	if err := p.Home.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Home), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:home: ", p), err)
	}
	return err
}

func (p *AnalysisResult_) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("suggest", thrift.STRUCT, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:suggest: ", p), err)
	}
	if err := p.Suggest.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Suggest), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:suggest: ", p), err)
	}
	return err
}

func (p *AnalysisResult_) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("totals", thrift.LIST, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:totals: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Totals)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Totals {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:totals: ", p), err)
	}
	return err
}

func (p *AnalysisResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AnalysisResult_(%+v)", *p)
}
