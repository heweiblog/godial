// Autogenerated by Thrift Compiler (0.9.3)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package com

import (
	"bytes"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

type Collect interface {
	// Parameters:
	//  - ModuleId
	//  - IP
	//  - Port
	RegisterModule(moduleId int32, ip *IpAddr, port int32) (r RetCode, err error)
	// Parameters:
	//  - ModuleId
	UnRegisterModule(moduleId int32) (r RetCode, err error)
	// Parameters:
	//  - ModuleId
	HeartBeat(moduleId int32) (r RetCode, err error)
	// Parameters:
	//  - ModuleId
	//  - TaskId
	//  - Arg
	ReportTaskProcess(moduleId int32, taskId string, arg *TaskProcessArgs_) (r RetCode, err error)
	// Parameters:
	//  - ModuleId
	//  - TaskId
	//  - Batchno
	//  - ResultList
	ReportResult_(moduleId int32, taskId string, batchno string, resultList []*DomainResult_) (r RetCode, err error)
}

type CollectClient struct {
	Transport       thrift.TTransport
	ProtocolFactory thrift.TProtocolFactory
	InputProtocol   thrift.TProtocol
	OutputProtocol  thrift.TProtocol
	SeqId           int32
}

func NewCollectClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *CollectClient {
	return &CollectClient{Transport: t,
		ProtocolFactory: f,
		InputProtocol:   f.GetProtocol(t),
		OutputProtocol:  f.GetProtocol(t),
		SeqId:           0,
	}
}

func NewCollectClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *CollectClient {
	return &CollectClient{Transport: t,
		ProtocolFactory: nil,
		InputProtocol:   iprot,
		OutputProtocol:  oprot,
		SeqId:           0,
	}
}

// Parameters:
//  - ModuleId
//  - IP
//  - Port
func (p *CollectClient) RegisterModule(moduleId int32, ip *IpAddr, port int32) (r RetCode, err error) {
	if err = p.sendRegisterModule(moduleId, ip, port); err != nil {
		return
	}
	return p.recvRegisterModule()
}

func (p *CollectClient) sendRegisterModule(moduleId int32, ip *IpAddr, port int32) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("registerModule", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := CollectRegisterModuleArgs{
		ModuleId: moduleId,
		IP:       ip,
		Port:     port,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *CollectClient) recvRegisterModule() (value RetCode, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "registerModule" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "registerModule failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "registerModule failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error89 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error90 error
		error90, err = error89.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error90
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "registerModule failed: invalid message type")
		return
	}
	result := CollectRegisterModuleResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Ex != nil {
		err = result.Ex
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - ModuleId
func (p *CollectClient) UnRegisterModule(moduleId int32) (r RetCode, err error) {
	if err = p.sendUnRegisterModule(moduleId); err != nil {
		return
	}
	return p.recvUnRegisterModule()
}

func (p *CollectClient) sendUnRegisterModule(moduleId int32) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("unRegisterModule", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := CollectUnRegisterModuleArgs{
		ModuleId: moduleId,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *CollectClient) recvUnRegisterModule() (value RetCode, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "unRegisterModule" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "unRegisterModule failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "unRegisterModule failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error91 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error92 error
		error92, err = error91.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error92
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "unRegisterModule failed: invalid message type")
		return
	}
	result := CollectUnRegisterModuleResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Ex != nil {
		err = result.Ex
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - ModuleId
func (p *CollectClient) HeartBeat(moduleId int32) (r RetCode, err error) {
	if err = p.sendHeartBeat(moduleId); err != nil {
		return
	}
	return p.recvHeartBeat()
}

func (p *CollectClient) sendHeartBeat(moduleId int32) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("heartBeat", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := CollectHeartBeatArgs{
		ModuleId: moduleId,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *CollectClient) recvHeartBeat() (value RetCode, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "heartBeat" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "heartBeat failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "heartBeat failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error93 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error94 error
		error94, err = error93.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error94
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "heartBeat failed: invalid message type")
		return
	}
	result := CollectHeartBeatResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Ex != nil {
		err = result.Ex
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - ModuleId
//  - TaskId
//  - Arg
func (p *CollectClient) ReportTaskProcess(moduleId int32, taskId string, arg *TaskProcessArgs_) (r RetCode, err error) {
	if err = p.sendReportTaskProcess(moduleId, taskId, arg); err != nil {
		return
	}
	return p.recvReportTaskProcess()
}

func (p *CollectClient) sendReportTaskProcess(moduleId int32, taskId string, arg *TaskProcessArgs_) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("reportTaskProcess", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := CollectReportTaskProcessArgs{
		ModuleId: moduleId,
		TaskId:   taskId,
		Arg:      arg,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *CollectClient) recvReportTaskProcess() (value RetCode, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "reportTaskProcess" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "reportTaskProcess failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "reportTaskProcess failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error95 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error96 error
		error96, err = error95.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error96
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "reportTaskProcess failed: invalid message type")
		return
	}
	result := CollectReportTaskProcessResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Ex != nil {
		err = result.Ex
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - ModuleId
//  - TaskId
//  - Batchno
//  - ResultList
func (p *CollectClient) ReportResult_(moduleId int32, taskId string, batchno string, resultList []*DomainResult_) (r RetCode, err error) {
	if err = p.sendReportResult_(moduleId, taskId, batchno, resultList); err != nil {
		return
	}
	return p.recvReportResult_()
}

func (p *CollectClient) sendReportResult_(moduleId int32, taskId string, batchno string, resultList []*DomainResult_) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("reportResult", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := CollectReportResultArgs{
		ModuleId:   moduleId,
		TaskId:     taskId,
		Batchno:    batchno,
		ResultList: resultList,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *CollectClient) recvReportResult_() (value RetCode, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "reportResult" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "reportResult failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "reportResult failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error97 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error98 error
		error98, err = error97.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error98
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "reportResult failed: invalid message type")
		return
	}
	result := CollectReportResultResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Ex != nil {
		err = result.Ex
		return
	}
	value = result.GetSuccess()
	return
}

type CollectProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      Collect
}

func (p *CollectProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *CollectProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *CollectProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewCollectProcessor(handler Collect) *CollectProcessor {

	self99 := &CollectProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self99.processorMap["registerModule"] = &collectProcessorRegisterModule{handler: handler}
	self99.processorMap["unRegisterModule"] = &collectProcessorUnRegisterModule{handler: handler}
	self99.processorMap["heartBeat"] = &collectProcessorHeartBeat{handler: handler}
	self99.processorMap["reportTaskProcess"] = &collectProcessorReportTaskProcess{handler: handler}
	self99.processorMap["reportResult"] = &collectProcessorReportResult_{handler: handler}
	return self99
}

func (p *CollectProcessor) Process(iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x100 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x100.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return false, x100

}

type collectProcessorRegisterModule struct {
	handler Collect
}

func (p *collectProcessorRegisterModule) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CollectRegisterModuleArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("registerModule", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := CollectRegisterModuleResult{}
	var retval RetCode
	var err2 error
	if retval, err2 = p.handler.RegisterModule(args.ModuleId, args.IP, args.Port); err2 != nil {
		switch v := err2.(type) {
		case *Xception:
			result.Ex = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing registerModule: "+err2.Error())
			oprot.WriteMessageBegin("registerModule", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("registerModule", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type collectProcessorUnRegisterModule struct {
	handler Collect
}

func (p *collectProcessorUnRegisterModule) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CollectUnRegisterModuleArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("unRegisterModule", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := CollectUnRegisterModuleResult{}
	var retval RetCode
	var err2 error
	if retval, err2 = p.handler.UnRegisterModule(args.ModuleId); err2 != nil {
		switch v := err2.(type) {
		case *Xception:
			result.Ex = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing unRegisterModule: "+err2.Error())
			oprot.WriteMessageBegin("unRegisterModule", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("unRegisterModule", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type collectProcessorHeartBeat struct {
	handler Collect
}

func (p *collectProcessorHeartBeat) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CollectHeartBeatArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("heartBeat", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := CollectHeartBeatResult{}
	var retval RetCode
	var err2 error
	if retval, err2 = p.handler.HeartBeat(args.ModuleId); err2 != nil {
		switch v := err2.(type) {
		case *Xception:
			result.Ex = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing heartBeat: "+err2.Error())
			oprot.WriteMessageBegin("heartBeat", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("heartBeat", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type collectProcessorReportTaskProcess struct {
	handler Collect
}

func (p *collectProcessorReportTaskProcess) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CollectReportTaskProcessArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("reportTaskProcess", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := CollectReportTaskProcessResult{}
	var retval RetCode
	var err2 error
	if retval, err2 = p.handler.ReportTaskProcess(args.ModuleId, args.TaskId, args.Arg); err2 != nil {
		switch v := err2.(type) {
		case *Xception:
			result.Ex = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing reportTaskProcess: "+err2.Error())
			oprot.WriteMessageBegin("reportTaskProcess", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("reportTaskProcess", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type collectProcessorReportResult_ struct {
	handler Collect
}

func (p *collectProcessorReportResult_) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CollectReportResultArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("reportResult", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := CollectReportResultResult{}
	var retval RetCode
	var err2 error
	if retval, err2 = p.handler.ReportResult_(args.ModuleId, args.TaskId, args.Batchno, args.ResultList); err2 != nil {
		switch v := err2.(type) {
		case *Xception:
			result.Ex = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing reportResult: "+err2.Error())
			oprot.WriteMessageBegin("reportResult", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("reportResult", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - ModuleId
//  - IP
//  - Port
type CollectRegisterModuleArgs struct {
	ModuleId int32   `thrift:"moduleId,1" json:"moduleId"`
	IP       *IpAddr `thrift:"ip,2" json:"ip"`
	Port     int32   `thrift:"port,3" json:"port"`
}

func NewCollectRegisterModuleArgs() *CollectRegisterModuleArgs {
	return &CollectRegisterModuleArgs{}
}

func (p *CollectRegisterModuleArgs) GetModuleId() int32 {
	return p.ModuleId
}

var CollectRegisterModuleArgs_IP_DEFAULT *IpAddr

func (p *CollectRegisterModuleArgs) GetIP() *IpAddr {
	if !p.IsSetIP() {
		return CollectRegisterModuleArgs_IP_DEFAULT
	}
	return p.IP
}

func (p *CollectRegisterModuleArgs) GetPort() int32 {
	return p.Port
}
func (p *CollectRegisterModuleArgs) IsSetIP() bool {
	return p.IP != nil
}

func (p *CollectRegisterModuleArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *CollectRegisterModuleArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ModuleId = v
	}
	return nil
}

func (p *CollectRegisterModuleArgs) readField2(iprot thrift.TProtocol) error {
	p.IP = &IpAddr{}
	if err := p.IP.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.IP), err)
	}
	return nil
}

func (p *CollectRegisterModuleArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Port = v
	}
	return nil
}

func (p *CollectRegisterModuleArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("registerModule_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *CollectRegisterModuleArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("moduleId", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:moduleId: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ModuleId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.moduleId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:moduleId: ", p), err)
	}
	return err
}

func (p *CollectRegisterModuleArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ip", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ip: ", p), err)
	}
	if err := p.IP.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.IP), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ip: ", p), err)
	}
	return err
}

func (p *CollectRegisterModuleArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("port", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:port: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Port)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.port (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:port: ", p), err)
	}
	return err
}

func (p *CollectRegisterModuleArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CollectRegisterModuleArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ex
type CollectRegisterModuleResult struct {
	Success *RetCode  `thrift:"success,0" json:"success,omitempty"`
	Ex      *Xception `thrift:"ex,1" json:"ex,omitempty"`
}

func NewCollectRegisterModuleResult() *CollectRegisterModuleResult {
	return &CollectRegisterModuleResult{}
}

var CollectRegisterModuleResult_Success_DEFAULT RetCode

func (p *CollectRegisterModuleResult) GetSuccess() RetCode {
	if !p.IsSetSuccess() {
		return CollectRegisterModuleResult_Success_DEFAULT
	}
	return *p.Success
}

var CollectRegisterModuleResult_Ex_DEFAULT *Xception

func (p *CollectRegisterModuleResult) GetEx() *Xception {
	if !p.IsSetEx() {
		return CollectRegisterModuleResult_Ex_DEFAULT
	}
	return p.Ex
}
func (p *CollectRegisterModuleResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CollectRegisterModuleResult) IsSetEx() bool {
	return p.Ex != nil
}

func (p *CollectRegisterModuleResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *CollectRegisterModuleResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		temp := RetCode(v)
		p.Success = &temp
	}
	return nil
}

func (p *CollectRegisterModuleResult) readField1(iprot thrift.TProtocol) error {
	p.Ex = &Xception{}
	if err := p.Ex.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
	}
	return nil
}

func (p *CollectRegisterModuleResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("registerModule_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *CollectRegisterModuleResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *CollectRegisterModuleResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetEx() {
		if err := oprot.WriteFieldBegin("ex", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err)
		}
		if err := p.Ex.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err)
		}
	}
	return err
}

func (p *CollectRegisterModuleResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CollectRegisterModuleResult(%+v)", *p)
}

// Attributes:
//  - ModuleId
type CollectUnRegisterModuleArgs struct {
	ModuleId int32 `thrift:"moduleId,1" json:"moduleId"`
}

func NewCollectUnRegisterModuleArgs() *CollectUnRegisterModuleArgs {
	return &CollectUnRegisterModuleArgs{}
}

func (p *CollectUnRegisterModuleArgs) GetModuleId() int32 {
	return p.ModuleId
}
func (p *CollectUnRegisterModuleArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *CollectUnRegisterModuleArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ModuleId = v
	}
	return nil
}

func (p *CollectUnRegisterModuleArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("unRegisterModule_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *CollectUnRegisterModuleArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("moduleId", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:moduleId: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ModuleId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.moduleId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:moduleId: ", p), err)
	}
	return err
}

func (p *CollectUnRegisterModuleArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CollectUnRegisterModuleArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ex
type CollectUnRegisterModuleResult struct {
	Success *RetCode  `thrift:"success,0" json:"success,omitempty"`
	Ex      *Xception `thrift:"ex,1" json:"ex,omitempty"`
}

func NewCollectUnRegisterModuleResult() *CollectUnRegisterModuleResult {
	return &CollectUnRegisterModuleResult{}
}

var CollectUnRegisterModuleResult_Success_DEFAULT RetCode

func (p *CollectUnRegisterModuleResult) GetSuccess() RetCode {
	if !p.IsSetSuccess() {
		return CollectUnRegisterModuleResult_Success_DEFAULT
	}
	return *p.Success
}

var CollectUnRegisterModuleResult_Ex_DEFAULT *Xception

func (p *CollectUnRegisterModuleResult) GetEx() *Xception {
	if !p.IsSetEx() {
		return CollectUnRegisterModuleResult_Ex_DEFAULT
	}
	return p.Ex
}
func (p *CollectUnRegisterModuleResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CollectUnRegisterModuleResult) IsSetEx() bool {
	return p.Ex != nil
}

func (p *CollectUnRegisterModuleResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *CollectUnRegisterModuleResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		temp := RetCode(v)
		p.Success = &temp
	}
	return nil
}

func (p *CollectUnRegisterModuleResult) readField1(iprot thrift.TProtocol) error {
	p.Ex = &Xception{}
	if err := p.Ex.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
	}
	return nil
}

func (p *CollectUnRegisterModuleResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("unRegisterModule_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *CollectUnRegisterModuleResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *CollectUnRegisterModuleResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetEx() {
		if err := oprot.WriteFieldBegin("ex", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err)
		}
		if err := p.Ex.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err)
		}
	}
	return err
}

func (p *CollectUnRegisterModuleResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CollectUnRegisterModuleResult(%+v)", *p)
}

// Attributes:
//  - ModuleId
type CollectHeartBeatArgs struct {
	ModuleId int32 `thrift:"moduleId,1" json:"moduleId"`
}

func NewCollectHeartBeatArgs() *CollectHeartBeatArgs {
	return &CollectHeartBeatArgs{}
}

func (p *CollectHeartBeatArgs) GetModuleId() int32 {
	return p.ModuleId
}
func (p *CollectHeartBeatArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *CollectHeartBeatArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ModuleId = v
	}
	return nil
}

func (p *CollectHeartBeatArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("heartBeat_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *CollectHeartBeatArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("moduleId", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:moduleId: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ModuleId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.moduleId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:moduleId: ", p), err)
	}
	return err
}

func (p *CollectHeartBeatArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CollectHeartBeatArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ex
type CollectHeartBeatResult struct {
	Success *RetCode  `thrift:"success,0" json:"success,omitempty"`
	Ex      *Xception `thrift:"ex,1" json:"ex,omitempty"`
}

func NewCollectHeartBeatResult() *CollectHeartBeatResult {
	return &CollectHeartBeatResult{}
}

var CollectHeartBeatResult_Success_DEFAULT RetCode

func (p *CollectHeartBeatResult) GetSuccess() RetCode {
	if !p.IsSetSuccess() {
		return CollectHeartBeatResult_Success_DEFAULT
	}
	return *p.Success
}

var CollectHeartBeatResult_Ex_DEFAULT *Xception

func (p *CollectHeartBeatResult) GetEx() *Xception {
	if !p.IsSetEx() {
		return CollectHeartBeatResult_Ex_DEFAULT
	}
	return p.Ex
}
func (p *CollectHeartBeatResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CollectHeartBeatResult) IsSetEx() bool {
	return p.Ex != nil
}

func (p *CollectHeartBeatResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *CollectHeartBeatResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		temp := RetCode(v)
		p.Success = &temp
	}
	return nil
}

func (p *CollectHeartBeatResult) readField1(iprot thrift.TProtocol) error {
	p.Ex = &Xception{}
	if err := p.Ex.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
	}
	return nil
}

func (p *CollectHeartBeatResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("heartBeat_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *CollectHeartBeatResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *CollectHeartBeatResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetEx() {
		if err := oprot.WriteFieldBegin("ex", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err)
		}
		if err := p.Ex.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err)
		}
	}
	return err
}

func (p *CollectHeartBeatResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CollectHeartBeatResult(%+v)", *p)
}

// Attributes:
//  - ModuleId
//  - TaskId
//  - Arg
type CollectReportTaskProcessArgs struct {
	ModuleId int32             `thrift:"moduleId,1" json:"moduleId"`
	TaskId   string            `thrift:"taskId,2" json:"taskId"`
	Arg      *TaskProcessArgs_ `thrift:"arg,3" json:"arg"`
}

func NewCollectReportTaskProcessArgs() *CollectReportTaskProcessArgs {
	return &CollectReportTaskProcessArgs{}
}

func (p *CollectReportTaskProcessArgs) GetModuleId() int32 {
	return p.ModuleId
}

func (p *CollectReportTaskProcessArgs) GetTaskId() string {
	return p.TaskId
}

var CollectReportTaskProcessArgs_Arg_DEFAULT *TaskProcessArgs_

func (p *CollectReportTaskProcessArgs) GetArg() *TaskProcessArgs_ {
	if !p.IsSetArg() {
		return CollectReportTaskProcessArgs_Arg_DEFAULT
	}
	return p.Arg
}
func (p *CollectReportTaskProcessArgs) IsSetArg() bool {
	return p.Arg != nil
}

func (p *CollectReportTaskProcessArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *CollectReportTaskProcessArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ModuleId = v
	}
	return nil
}

func (p *CollectReportTaskProcessArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.TaskId = v
	}
	return nil
}

func (p *CollectReportTaskProcessArgs) readField3(iprot thrift.TProtocol) error {
	p.Arg = &TaskProcessArgs_{}
	if err := p.Arg.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Arg), err)
	}
	return nil
}

func (p *CollectReportTaskProcessArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("reportTaskProcess_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *CollectReportTaskProcessArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("moduleId", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:moduleId: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ModuleId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.moduleId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:moduleId: ", p), err)
	}
	return err
}

func (p *CollectReportTaskProcessArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("taskId", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:taskId: ", p), err)
	}
	if err := oprot.WriteString(string(p.TaskId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.taskId (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:taskId: ", p), err)
	}
	return err
}

func (p *CollectReportTaskProcessArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("arg", thrift.STRUCT, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:arg: ", p), err)
	}
	if err := p.Arg.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Arg), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:arg: ", p), err)
	}
	return err
}

func (p *CollectReportTaskProcessArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CollectReportTaskProcessArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ex
type CollectReportTaskProcessResult struct {
	Success *RetCode  `thrift:"success,0" json:"success,omitempty"`
	Ex      *Xception `thrift:"ex,1" json:"ex,omitempty"`
}

func NewCollectReportTaskProcessResult() *CollectReportTaskProcessResult {
	return &CollectReportTaskProcessResult{}
}

var CollectReportTaskProcessResult_Success_DEFAULT RetCode

func (p *CollectReportTaskProcessResult) GetSuccess() RetCode {
	if !p.IsSetSuccess() {
		return CollectReportTaskProcessResult_Success_DEFAULT
	}
	return *p.Success
}

var CollectReportTaskProcessResult_Ex_DEFAULT *Xception

func (p *CollectReportTaskProcessResult) GetEx() *Xception {
	if !p.IsSetEx() {
		return CollectReportTaskProcessResult_Ex_DEFAULT
	}
	return p.Ex
}
func (p *CollectReportTaskProcessResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CollectReportTaskProcessResult) IsSetEx() bool {
	return p.Ex != nil
}

func (p *CollectReportTaskProcessResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *CollectReportTaskProcessResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		temp := RetCode(v)
		p.Success = &temp
	}
	return nil
}

func (p *CollectReportTaskProcessResult) readField1(iprot thrift.TProtocol) error {
	p.Ex = &Xception{}
	if err := p.Ex.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
	}
	return nil
}

func (p *CollectReportTaskProcessResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("reportTaskProcess_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *CollectReportTaskProcessResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *CollectReportTaskProcessResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetEx() {
		if err := oprot.WriteFieldBegin("ex", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err)
		}
		if err := p.Ex.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err)
		}
	}
	return err
}

func (p *CollectReportTaskProcessResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CollectReportTaskProcessResult(%+v)", *p)
}

// Attributes:
//  - ModuleId
//  - TaskId
//  - Batchno
//  - ResultList
type CollectReportResultArgs struct {
	ModuleId   int32            `thrift:"moduleId,1" json:"moduleId"`
	TaskId     string           `thrift:"taskId,2" json:"taskId"`
	Batchno    string           `thrift:"batchno,3" json:"batchno"`
	ResultList []*DomainResult_ `thrift:"resultList,4" json:"resultList"`
}

func NewCollectReportResultArgs() *CollectReportResultArgs {
	return &CollectReportResultArgs{}
}

func (p *CollectReportResultArgs) GetModuleId() int32 {
	return p.ModuleId
}

func (p *CollectReportResultArgs) GetTaskId() string {
	return p.TaskId
}

func (p *CollectReportResultArgs) GetBatchno() string {
	return p.Batchno
}

func (p *CollectReportResultArgs) GetResultList() []*DomainResult_ {
	return p.ResultList
}
func (p *CollectReportResultArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *CollectReportResultArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ModuleId = v
	}
	return nil
}

func (p *CollectReportResultArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.TaskId = v
	}
	return nil
}

func (p *CollectReportResultArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Batchno = v
	}
	return nil
}

func (p *CollectReportResultArgs) readField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*DomainResult_, 0, size)
	p.ResultList = tSlice
	for i := 0; i < size; i++ {
		_elem101 := &DomainResult_{}
		if err := _elem101.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem101), err)
		}
		p.ResultList = append(p.ResultList, _elem101)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *CollectReportResultArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("reportResult_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *CollectReportResultArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("moduleId", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:moduleId: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ModuleId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.moduleId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:moduleId: ", p), err)
	}
	return err
}

func (p *CollectReportResultArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("taskId", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:taskId: ", p), err)
	}
	if err := oprot.WriteString(string(p.TaskId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.taskId (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:taskId: ", p), err)
	}
	return err
}

func (p *CollectReportResultArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("batchno", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:batchno: ", p), err)
	}
	if err := oprot.WriteString(string(p.Batchno)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.batchno (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:batchno: ", p), err)
	}
	return err
}

func (p *CollectReportResultArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("resultList", thrift.LIST, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:resultList: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.ResultList)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.ResultList {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:resultList: ", p), err)
	}
	return err
}

func (p *CollectReportResultArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CollectReportResultArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ex
type CollectReportResultResult struct {
	Success *RetCode  `thrift:"success,0" json:"success,omitempty"`
	Ex      *Xception `thrift:"ex,1" json:"ex,omitempty"`
}

func NewCollectReportResultResult() *CollectReportResultResult {
	return &CollectReportResultResult{}
}

var CollectReportResultResult_Success_DEFAULT RetCode

func (p *CollectReportResultResult) GetSuccess() RetCode {
	if !p.IsSetSuccess() {
		return CollectReportResultResult_Success_DEFAULT
	}
	return *p.Success
}

var CollectReportResultResult_Ex_DEFAULT *Xception

func (p *CollectReportResultResult) GetEx() *Xception {
	if !p.IsSetEx() {
		return CollectReportResultResult_Ex_DEFAULT
	}
	return p.Ex
}
func (p *CollectReportResultResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CollectReportResultResult) IsSetEx() bool {
	return p.Ex != nil
}

func (p *CollectReportResultResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *CollectReportResultResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		temp := RetCode(v)
		p.Success = &temp
	}
	return nil
}

func (p *CollectReportResultResult) readField1(iprot thrift.TProtocol) error {
	p.Ex = &Xception{}
	if err := p.Ex.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
	}
	return nil
}

func (p *CollectReportResultResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("reportResult_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *CollectReportResultResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *CollectReportResultResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetEx() {
		if err := oprot.WriteFieldBegin("ex", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err)
		}
		if err := p.Ex.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err)
		}
	}
	return err
}

func (p *CollectReportResultResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CollectReportResultResult(%+v)", *p)
}
