// Autogenerated by Thrift Compiler (0.9.3)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package main

import (
	"flag"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
	"math"
	"net"
	"net/url"
	"os"
	"rpc/yamutech/com"
	"strconv"
	"strings"
)

func Usage() {
	fmt.Fprintln(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:")
	flag.PrintDefaults()
	fmt.Fprintln(os.Stderr, "\nFunctions:")
	fmt.Fprintln(os.Stderr, "  RetCode heartBeat()")
	fmt.Fprintln(os.Stderr, "  RetCode resetModule()")
	fmt.Fprintln(os.Stderr, "  RetCode addIpSec( ipSecList)")
	fmt.Fprintln(os.Stderr, "  RetCode removeIpSec( ipSecList)")
	fmt.Fprintln(os.Stderr, "  RetCode clearIpSec()")
	fmt.Fprintln(os.Stderr, "  RetCode addDialDomain(string groupId,  DomainList)")
	fmt.Fprintln(os.Stderr, "  RetCode removeDialDomain(string groupId,  DomainList)")
	fmt.Fprintln(os.Stderr, "  RetCode clearDialDomain(string groupId)")
	fmt.Fprintln(os.Stderr, "  RetCode addDialTask(string taskId, DialMethod method,  targetList, IpAddr sourceip, i32 interval, string domainGroupId)")
	fmt.Fprintln(os.Stderr, "  RetCode removeDialTask(string taskId)")
	fmt.Fprintln(os.Stderr)
	os.Exit(0)
}

func main() {
	flag.Usage = Usage
	var host string
	var port int
	var protocol string
	var urlString string
	var framed bool
	var useHttp bool
	var parsedUrl url.URL
	var trans thrift.TTransport
	_ = strconv.Atoi
	_ = math.Abs
	flag.Usage = Usage
	flag.StringVar(&host, "h", "localhost", "Specify host and port")
	flag.IntVar(&port, "p", 9090, "Specify port")
	flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
	flag.StringVar(&urlString, "u", "", "Specify the url")
	flag.BoolVar(&framed, "framed", false, "Use framed transport")
	flag.BoolVar(&useHttp, "http", false, "Use http")
	flag.Parse()

	if len(urlString) > 0 {
		parsedUrl, err := url.Parse(urlString)
		if err != nil {
			fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
			flag.Usage()
		}
		host = parsedUrl.Host
		useHttp = len(parsedUrl.Scheme) <= 0 || parsedUrl.Scheme == "http"
	} else if useHttp {
		_, err := url.Parse(fmt.Sprint("http://", host, ":", port))
		if err != nil {
			fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
			flag.Usage()
		}
	}

	cmd := flag.Arg(0)
	var err error
	if useHttp {
		trans, err = thrift.NewTHttpClient(parsedUrl.String())
	} else {
		portStr := fmt.Sprint(port)
		if strings.Contains(host, ":") {
			host, portStr, err = net.SplitHostPort(host)
			if err != nil {
				fmt.Fprintln(os.Stderr, "error with host:", err)
				os.Exit(1)
			}
		}
		trans, err = thrift.NewTSocket(net.JoinHostPort(host, portStr))
		if err != nil {
			fmt.Fprintln(os.Stderr, "error resolving address:", err)
			os.Exit(1)
		}
		if framed {
			trans = thrift.NewTFramedTransport(trans)
		}
	}
	if err != nil {
		fmt.Fprintln(os.Stderr, "Error creating transport", err)
		os.Exit(1)
	}
	defer trans.Close()
	var protocolFactory thrift.TProtocolFactory
	switch protocol {
	case "compact":
		protocolFactory = thrift.NewTCompactProtocolFactory()
		break
	case "simplejson":
		protocolFactory = thrift.NewTSimpleJSONProtocolFactory()
		break
	case "json":
		protocolFactory = thrift.NewTJSONProtocolFactory()
		break
	case "binary", "":
		protocolFactory = thrift.NewTBinaryProtocolFactoryDefault()
		break
	default:
		fmt.Fprintln(os.Stderr, "Invalid protocol specified: ", protocol)
		Usage()
		os.Exit(1)
	}
	client := com.NewDialClientFactory(trans, protocolFactory)
	if err := trans.Open(); err != nil {
		fmt.Fprintln(os.Stderr, "Error opening socket to ", host, ":", port, " ", err)
		os.Exit(1)
	}

	switch cmd {
	case "heartBeat":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "HeartBeat requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.HeartBeat())
		fmt.Print("\n")
		break
	case "resetModule":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "ResetModule requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.ResetModule())
		fmt.Print("\n")
		break
	case "addIpSec":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "AddIpSec requires 1 args")
			flag.Usage()
		}
		arg156 := flag.Arg(1)
		mbTrans157 := thrift.NewTMemoryBufferLen(len(arg156))
		defer mbTrans157.Close()
		_, err158 := mbTrans157.WriteString(arg156)
		if err158 != nil {
			Usage()
			return
		}
		factory159 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt160 := factory159.GetProtocol(mbTrans157)
		containerStruct0 := com.NewDialAddIpSecArgs()
		err161 := containerStruct0.ReadField1(jsProt160)
		if err161 != nil {
			Usage()
			return
		}
		argvalue0 := containerStruct0.IpSecList
		value0 := argvalue0
		fmt.Print(client.AddIpSec(value0))
		fmt.Print("\n")
		break
	case "removeIpSec":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "RemoveIpSec requires 1 args")
			flag.Usage()
		}
		arg162 := flag.Arg(1)
		mbTrans163 := thrift.NewTMemoryBufferLen(len(arg162))
		defer mbTrans163.Close()
		_, err164 := mbTrans163.WriteString(arg162)
		if err164 != nil {
			Usage()
			return
		}
		factory165 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt166 := factory165.GetProtocol(mbTrans163)
		containerStruct0 := com.NewDialRemoveIpSecArgs()
		err167 := containerStruct0.ReadField1(jsProt166)
		if err167 != nil {
			Usage()
			return
		}
		argvalue0 := containerStruct0.IpSecList
		value0 := argvalue0
		fmt.Print(client.RemoveIpSec(value0))
		fmt.Print("\n")
		break
	case "clearIpSec":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "ClearIpSec requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.ClearIpSec())
		fmt.Print("\n")
		break
	case "addDialDomain":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "AddDialDomain requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		arg169 := flag.Arg(2)
		mbTrans170 := thrift.NewTMemoryBufferLen(len(arg169))
		defer mbTrans170.Close()
		_, err171 := mbTrans170.WriteString(arg169)
		if err171 != nil {
			Usage()
			return
		}
		factory172 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt173 := factory172.GetProtocol(mbTrans170)
		containerStruct1 := com.NewDialAddDialDomainArgs()
		err174 := containerStruct1.ReadField2(jsProt173)
		if err174 != nil {
			Usage()
			return
		}
		argvalue1 := containerStruct1.DomainList
		value1 := argvalue1
		fmt.Print(client.AddDialDomain(value0, value1))
		fmt.Print("\n")
		break
	case "removeDialDomain":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "RemoveDialDomain requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		arg176 := flag.Arg(2)
		mbTrans177 := thrift.NewTMemoryBufferLen(len(arg176))
		defer mbTrans177.Close()
		_, err178 := mbTrans177.WriteString(arg176)
		if err178 != nil {
			Usage()
			return
		}
		factory179 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt180 := factory179.GetProtocol(mbTrans177)
		containerStruct1 := com.NewDialRemoveDialDomainArgs()
		err181 := containerStruct1.ReadField2(jsProt180)
		if err181 != nil {
			Usage()
			return
		}
		argvalue1 := containerStruct1.DomainList
		value1 := argvalue1
		fmt.Print(client.RemoveDialDomain(value0, value1))
		fmt.Print("\n")
		break
	case "clearDialDomain":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "ClearDialDomain requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.ClearDialDomain(value0))
		fmt.Print("\n")
		break
	case "addDialTask":
		if flag.NArg()-1 != 6 {
			fmt.Fprintln(os.Stderr, "AddDialTask requires 6 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		tmp1, err := (strconv.Atoi(flag.Arg(2)))
		if err != nil {
			Usage()
			return
		}
		argvalue1 := com.DialMethod(tmp1)
		value1 := argvalue1
		arg184 := flag.Arg(3)
		mbTrans185 := thrift.NewTMemoryBufferLen(len(arg184))
		defer mbTrans185.Close()
		_, err186 := mbTrans185.WriteString(arg184)
		if err186 != nil {
			Usage()
			return
		}
		factory187 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt188 := factory187.GetProtocol(mbTrans185)
		containerStruct2 := com.NewDialAddDialTaskArgs()
		err189 := containerStruct2.ReadField3(jsProt188)
		if err189 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.TargetList
		value2 := argvalue2
		arg190 := flag.Arg(4)
		mbTrans191 := thrift.NewTMemoryBufferLen(len(arg190))
		defer mbTrans191.Close()
		_, err192 := mbTrans191.WriteString(arg190)
		if err192 != nil {
			Usage()
			return
		}
		factory193 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt194 := factory193.GetProtocol(mbTrans191)
		argvalue3 := com.NewIpAddr()
		err195 := argvalue3.Read(jsProt194)
		if err195 != nil {
			Usage()
			return
		}
		value3 := argvalue3
		tmp4, err196 := (strconv.Atoi(flag.Arg(5)))
		if err196 != nil {
			Usage()
			return
		}
		argvalue4 := int32(tmp4)
		value4 := argvalue4
		argvalue5 := flag.Arg(6)
		value5 := argvalue5
		fmt.Print(client.AddDialTask(value0, value1, value2, value3, value4, value5))
		fmt.Print("\n")
		break
	case "removeDialTask":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "RemoveDialTask requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.RemoveDialTask(value0))
		fmt.Print("\n")
		break
	case "":
		Usage()
		break
	default:
		fmt.Fprintln(os.Stderr, "Invalid function ", cmd)
	}
}
