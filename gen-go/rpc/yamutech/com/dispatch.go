// Autogenerated by Thrift Compiler (0.9.3)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package com

import (
	"bytes"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

type Dispatch interface {
	// Parameters:
	//  - TaskId
	//  - Interval
	//  - Policy
	AddDispatchTask(taskId string, interval int32, policy int32) (r RetCode, err error)
	// Parameters:
	//  - TaskId
	//  - Interval
	//  - Policy
	UpdateDispatchTask(taskId string, interval int32, policy int32) (r RetCode, err error)
	// Parameters:
	//  - TaskId
	RemoveDispatchTask(taskId string) (r RetCode, err error)
}

type DispatchClient struct {
	Transport       thrift.TTransport
	ProtocolFactory thrift.TProtocolFactory
	InputProtocol   thrift.TProtocol
	OutputProtocol  thrift.TProtocol
	SeqId           int32
}

func NewDispatchClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *DispatchClient {
	return &DispatchClient{Transport: t,
		ProtocolFactory: f,
		InputProtocol:   f.GetProtocol(t),
		OutputProtocol:  f.GetProtocol(t),
		SeqId:           0,
	}
}

func NewDispatchClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *DispatchClient {
	return &DispatchClient{Transport: t,
		ProtocolFactory: nil,
		InputProtocol:   iprot,
		OutputProtocol:  oprot,
		SeqId:           0,
	}
}

// Parameters:
//  - TaskId
//  - Interval
//  - Policy
func (p *DispatchClient) AddDispatchTask(taskId string, interval int32, policy int32) (r RetCode, err error) {
	if err = p.sendAddDispatchTask(taskId, interval, policy); err != nil {
		return
	}
	return p.recvAddDispatchTask()
}

func (p *DispatchClient) sendAddDispatchTask(taskId string, interval int32, policy int32) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("addDispatchTask", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := DispatchAddDispatchTaskArgs{
		TaskId:   taskId,
		Interval: interval,
		Policy:   policy,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *DispatchClient) recvAddDispatchTask() (value RetCode, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "addDispatchTask" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "addDispatchTask failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "addDispatchTask failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error38 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error39 error
		error39, err = error38.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error39
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "addDispatchTask failed: invalid message type")
		return
	}
	result := DispatchAddDispatchTaskResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Ex != nil {
		err = result.Ex
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - TaskId
//  - Interval
//  - Policy
func (p *DispatchClient) UpdateDispatchTask(taskId string, interval int32, policy int32) (r RetCode, err error) {
	if err = p.sendUpdateDispatchTask(taskId, interval, policy); err != nil {
		return
	}
	return p.recvUpdateDispatchTask()
}

func (p *DispatchClient) sendUpdateDispatchTask(taskId string, interval int32, policy int32) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("updateDispatchTask", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := DispatchUpdateDispatchTaskArgs{
		TaskId:   taskId,
		Interval: interval,
		Policy:   policy,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *DispatchClient) recvUpdateDispatchTask() (value RetCode, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "updateDispatchTask" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "updateDispatchTask failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "updateDispatchTask failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error40 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error41 error
		error41, err = error40.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error41
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "updateDispatchTask failed: invalid message type")
		return
	}
	result := DispatchUpdateDispatchTaskResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Ex != nil {
		err = result.Ex
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - TaskId
func (p *DispatchClient) RemoveDispatchTask(taskId string) (r RetCode, err error) {
	if err = p.sendRemoveDispatchTask(taskId); err != nil {
		return
	}
	return p.recvRemoveDispatchTask()
}

func (p *DispatchClient) sendRemoveDispatchTask(taskId string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("removeDispatchTask", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := DispatchRemoveDispatchTaskArgs{
		TaskId: taskId,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *DispatchClient) recvRemoveDispatchTask() (value RetCode, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "removeDispatchTask" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "removeDispatchTask failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "removeDispatchTask failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error42 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error43 error
		error43, err = error42.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error43
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "removeDispatchTask failed: invalid message type")
		return
	}
	result := DispatchRemoveDispatchTaskResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Ex != nil {
		err = result.Ex
		return
	}
	value = result.GetSuccess()
	return
}

type DispatchProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      Dispatch
}

func (p *DispatchProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *DispatchProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *DispatchProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewDispatchProcessor(handler Dispatch) *DispatchProcessor {

	self44 := &DispatchProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self44.processorMap["addDispatchTask"] = &dispatchProcessorAddDispatchTask{handler: handler}
	self44.processorMap["updateDispatchTask"] = &dispatchProcessorUpdateDispatchTask{handler: handler}
	self44.processorMap["removeDispatchTask"] = &dispatchProcessorRemoveDispatchTask{handler: handler}
	return self44
}

func (p *DispatchProcessor) Process(iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x45 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x45.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return false, x45

}

type dispatchProcessorAddDispatchTask struct {
	handler Dispatch
}

func (p *dispatchProcessorAddDispatchTask) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := DispatchAddDispatchTaskArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("addDispatchTask", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := DispatchAddDispatchTaskResult{}
	var retval RetCode
	var err2 error
	if retval, err2 = p.handler.AddDispatchTask(args.TaskId, args.Interval, args.Policy); err2 != nil {
		switch v := err2.(type) {
		case *Xception:
			result.Ex = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing addDispatchTask: "+err2.Error())
			oprot.WriteMessageBegin("addDispatchTask", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("addDispatchTask", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type dispatchProcessorUpdateDispatchTask struct {
	handler Dispatch
}

func (p *dispatchProcessorUpdateDispatchTask) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := DispatchUpdateDispatchTaskArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("updateDispatchTask", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := DispatchUpdateDispatchTaskResult{}
	var retval RetCode
	var err2 error
	if retval, err2 = p.handler.UpdateDispatchTask(args.TaskId, args.Interval, args.Policy); err2 != nil {
		switch v := err2.(type) {
		case *Xception:
			result.Ex = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateDispatchTask: "+err2.Error())
			oprot.WriteMessageBegin("updateDispatchTask", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("updateDispatchTask", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type dispatchProcessorRemoveDispatchTask struct {
	handler Dispatch
}

func (p *dispatchProcessorRemoveDispatchTask) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := DispatchRemoveDispatchTaskArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("removeDispatchTask", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := DispatchRemoveDispatchTaskResult{}
	var retval RetCode
	var err2 error
	if retval, err2 = p.handler.RemoveDispatchTask(args.TaskId); err2 != nil {
		switch v := err2.(type) {
		case *Xception:
			result.Ex = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing removeDispatchTask: "+err2.Error())
			oprot.WriteMessageBegin("removeDispatchTask", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("removeDispatchTask", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - TaskId
//  - Interval
//  - Policy
type DispatchAddDispatchTaskArgs struct {
	TaskId   string `thrift:"taskId,1" json:"taskId"`
	Interval int32  `thrift:"interval,2" json:"interval"`
	Policy   int32  `thrift:"policy,3" json:"policy"`
}

func NewDispatchAddDispatchTaskArgs() *DispatchAddDispatchTaskArgs {
	return &DispatchAddDispatchTaskArgs{}
}

func (p *DispatchAddDispatchTaskArgs) GetTaskId() string {
	return p.TaskId
}

func (p *DispatchAddDispatchTaskArgs) GetInterval() int32 {
	return p.Interval
}

func (p *DispatchAddDispatchTaskArgs) GetPolicy() int32 {
	return p.Policy
}
func (p *DispatchAddDispatchTaskArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *DispatchAddDispatchTaskArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.TaskId = v
	}
	return nil
}

func (p *DispatchAddDispatchTaskArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Interval = v
	}
	return nil
}

func (p *DispatchAddDispatchTaskArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Policy = v
	}
	return nil
}

func (p *DispatchAddDispatchTaskArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("addDispatchTask_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *DispatchAddDispatchTaskArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("taskId", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:taskId: ", p), err)
	}
	if err := oprot.WriteString(string(p.TaskId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.taskId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:taskId: ", p), err)
	}
	return err
}

func (p *DispatchAddDispatchTaskArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("interval", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:interval: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Interval)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.interval (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:interval: ", p), err)
	}
	return err
}

func (p *DispatchAddDispatchTaskArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("policy", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:policy: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Policy)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.policy (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:policy: ", p), err)
	}
	return err
}

func (p *DispatchAddDispatchTaskArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DispatchAddDispatchTaskArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ex
type DispatchAddDispatchTaskResult struct {
	Success *RetCode  `thrift:"success,0" json:"success,omitempty"`
	Ex      *Xception `thrift:"ex,1" json:"ex,omitempty"`
}

func NewDispatchAddDispatchTaskResult() *DispatchAddDispatchTaskResult {
	return &DispatchAddDispatchTaskResult{}
}

var DispatchAddDispatchTaskResult_Success_DEFAULT RetCode

func (p *DispatchAddDispatchTaskResult) GetSuccess() RetCode {
	if !p.IsSetSuccess() {
		return DispatchAddDispatchTaskResult_Success_DEFAULT
	}
	return *p.Success
}

var DispatchAddDispatchTaskResult_Ex_DEFAULT *Xception

func (p *DispatchAddDispatchTaskResult) GetEx() *Xception {
	if !p.IsSetEx() {
		return DispatchAddDispatchTaskResult_Ex_DEFAULT
	}
	return p.Ex
}
func (p *DispatchAddDispatchTaskResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DispatchAddDispatchTaskResult) IsSetEx() bool {
	return p.Ex != nil
}

func (p *DispatchAddDispatchTaskResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *DispatchAddDispatchTaskResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		temp := RetCode(v)
		p.Success = &temp
	}
	return nil
}

func (p *DispatchAddDispatchTaskResult) readField1(iprot thrift.TProtocol) error {
	p.Ex = &Xception{}
	if err := p.Ex.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
	}
	return nil
}

func (p *DispatchAddDispatchTaskResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("addDispatchTask_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *DispatchAddDispatchTaskResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *DispatchAddDispatchTaskResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetEx() {
		if err := oprot.WriteFieldBegin("ex", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err)
		}
		if err := p.Ex.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err)
		}
	}
	return err
}

func (p *DispatchAddDispatchTaskResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DispatchAddDispatchTaskResult(%+v)", *p)
}

// Attributes:
//  - TaskId
//  - Interval
//  - Policy
type DispatchUpdateDispatchTaskArgs struct {
	TaskId   string `thrift:"taskId,1" json:"taskId"`
	Interval int32  `thrift:"interval,2" json:"interval"`
	Policy   int32  `thrift:"policy,3" json:"policy"`
}

func NewDispatchUpdateDispatchTaskArgs() *DispatchUpdateDispatchTaskArgs {
	return &DispatchUpdateDispatchTaskArgs{}
}

func (p *DispatchUpdateDispatchTaskArgs) GetTaskId() string {
	return p.TaskId
}

func (p *DispatchUpdateDispatchTaskArgs) GetInterval() int32 {
	return p.Interval
}

func (p *DispatchUpdateDispatchTaskArgs) GetPolicy() int32 {
	return p.Policy
}
func (p *DispatchUpdateDispatchTaskArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *DispatchUpdateDispatchTaskArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.TaskId = v
	}
	return nil
}

func (p *DispatchUpdateDispatchTaskArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Interval = v
	}
	return nil
}

func (p *DispatchUpdateDispatchTaskArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Policy = v
	}
	return nil
}

func (p *DispatchUpdateDispatchTaskArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("updateDispatchTask_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *DispatchUpdateDispatchTaskArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("taskId", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:taskId: ", p), err)
	}
	if err := oprot.WriteString(string(p.TaskId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.taskId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:taskId: ", p), err)
	}
	return err
}

func (p *DispatchUpdateDispatchTaskArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("interval", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:interval: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Interval)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.interval (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:interval: ", p), err)
	}
	return err
}

func (p *DispatchUpdateDispatchTaskArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("policy", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:policy: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Policy)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.policy (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:policy: ", p), err)
	}
	return err
}

func (p *DispatchUpdateDispatchTaskArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DispatchUpdateDispatchTaskArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ex
type DispatchUpdateDispatchTaskResult struct {
	Success *RetCode  `thrift:"success,0" json:"success,omitempty"`
	Ex      *Xception `thrift:"ex,1" json:"ex,omitempty"`
}

func NewDispatchUpdateDispatchTaskResult() *DispatchUpdateDispatchTaskResult {
	return &DispatchUpdateDispatchTaskResult{}
}

var DispatchUpdateDispatchTaskResult_Success_DEFAULT RetCode

func (p *DispatchUpdateDispatchTaskResult) GetSuccess() RetCode {
	if !p.IsSetSuccess() {
		return DispatchUpdateDispatchTaskResult_Success_DEFAULT
	}
	return *p.Success
}

var DispatchUpdateDispatchTaskResult_Ex_DEFAULT *Xception

func (p *DispatchUpdateDispatchTaskResult) GetEx() *Xception {
	if !p.IsSetEx() {
		return DispatchUpdateDispatchTaskResult_Ex_DEFAULT
	}
	return p.Ex
}
func (p *DispatchUpdateDispatchTaskResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DispatchUpdateDispatchTaskResult) IsSetEx() bool {
	return p.Ex != nil
}

func (p *DispatchUpdateDispatchTaskResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *DispatchUpdateDispatchTaskResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		temp := RetCode(v)
		p.Success = &temp
	}
	return nil
}

func (p *DispatchUpdateDispatchTaskResult) readField1(iprot thrift.TProtocol) error {
	p.Ex = &Xception{}
	if err := p.Ex.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
	}
	return nil
}

func (p *DispatchUpdateDispatchTaskResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("updateDispatchTask_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *DispatchUpdateDispatchTaskResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *DispatchUpdateDispatchTaskResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetEx() {
		if err := oprot.WriteFieldBegin("ex", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err)
		}
		if err := p.Ex.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err)
		}
	}
	return err
}

func (p *DispatchUpdateDispatchTaskResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DispatchUpdateDispatchTaskResult(%+v)", *p)
}

// Attributes:
//  - TaskId
type DispatchRemoveDispatchTaskArgs struct {
	TaskId string `thrift:"taskId,1" json:"taskId"`
}

func NewDispatchRemoveDispatchTaskArgs() *DispatchRemoveDispatchTaskArgs {
	return &DispatchRemoveDispatchTaskArgs{}
}

func (p *DispatchRemoveDispatchTaskArgs) GetTaskId() string {
	return p.TaskId
}
func (p *DispatchRemoveDispatchTaskArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *DispatchRemoveDispatchTaskArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.TaskId = v
	}
	return nil
}

func (p *DispatchRemoveDispatchTaskArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("removeDispatchTask_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *DispatchRemoveDispatchTaskArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("taskId", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:taskId: ", p), err)
	}
	if err := oprot.WriteString(string(p.TaskId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.taskId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:taskId: ", p), err)
	}
	return err
}

func (p *DispatchRemoveDispatchTaskArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DispatchRemoveDispatchTaskArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ex
type DispatchRemoveDispatchTaskResult struct {
	Success *RetCode  `thrift:"success,0" json:"success,omitempty"`
	Ex      *Xception `thrift:"ex,1" json:"ex,omitempty"`
}

func NewDispatchRemoveDispatchTaskResult() *DispatchRemoveDispatchTaskResult {
	return &DispatchRemoveDispatchTaskResult{}
}

var DispatchRemoveDispatchTaskResult_Success_DEFAULT RetCode

func (p *DispatchRemoveDispatchTaskResult) GetSuccess() RetCode {
	if !p.IsSetSuccess() {
		return DispatchRemoveDispatchTaskResult_Success_DEFAULT
	}
	return *p.Success
}

var DispatchRemoveDispatchTaskResult_Ex_DEFAULT *Xception

func (p *DispatchRemoveDispatchTaskResult) GetEx() *Xception {
	if !p.IsSetEx() {
		return DispatchRemoveDispatchTaskResult_Ex_DEFAULT
	}
	return p.Ex
}
func (p *DispatchRemoveDispatchTaskResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DispatchRemoveDispatchTaskResult) IsSetEx() bool {
	return p.Ex != nil
}

func (p *DispatchRemoveDispatchTaskResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *DispatchRemoveDispatchTaskResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		temp := RetCode(v)
		p.Success = &temp
	}
	return nil
}

func (p *DispatchRemoveDispatchTaskResult) readField1(iprot thrift.TProtocol) error {
	p.Ex = &Xception{}
	if err := p.Ex.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
	}
	return nil
}

func (p *DispatchRemoveDispatchTaskResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("removeDispatchTask_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *DispatchRemoveDispatchTaskResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *DispatchRemoveDispatchTaskResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetEx() {
		if err := oprot.WriteFieldBegin("ex", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err)
		}
		if err := p.Ex.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err)
		}
	}
	return err
}

func (p *DispatchRemoveDispatchTaskResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DispatchRemoveDispatchTaskResult(%+v)", *p)
}
