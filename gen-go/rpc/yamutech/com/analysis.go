// Autogenerated by Thrift Compiler (0.9.3)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package com

import (
	"bytes"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

type Analysis interface {
	// Parameters:
	//  - GroupId
	//  - Dname
	//  - Dtype
	//  - TargetId
	GetDomainTarget(groupId string, dname string, dtype string, targetId string) (r *DomainTarget, err error)
	// Parameters:
	//  - GroupId
	//  - Skip
	//  - Limit
	GetAnalysisResultPageList(groupId string, skip int32, limit int32) (r []*AnalysisResult_, err error)
	// Parameters:
	//  - ModuleId
	//  - TaskId
	//  - Arg
	ReportTaskProcess(moduleId int32, taskId string, arg *TaskProcessArgs_) (r RetCode, err error)
	// Parameters:
	//  - ModuleId
	//  - TaskId
	//  - Batchno
	//  - ResultList
	ReportResult_(moduleId int32, taskId string, batchno string, resultList []*DomainResult_) (r RetCode, err error)
}

type AnalysisClient struct {
	Transport       thrift.TTransport
	ProtocolFactory thrift.TProtocolFactory
	InputProtocol   thrift.TProtocol
	OutputProtocol  thrift.TProtocol
	SeqId           int32
}

func NewAnalysisClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *AnalysisClient {
	return &AnalysisClient{Transport: t,
		ProtocolFactory: f,
		InputProtocol:   f.GetProtocol(t),
		OutputProtocol:  f.GetProtocol(t),
		SeqId:           0,
	}
}

func NewAnalysisClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *AnalysisClient {
	return &AnalysisClient{Transport: t,
		ProtocolFactory: nil,
		InputProtocol:   iprot,
		OutputProtocol:  oprot,
		SeqId:           0,
	}
}

// Parameters:
//  - GroupId
//  - Dname
//  - Dtype
//  - TargetId
func (p *AnalysisClient) GetDomainTarget(groupId string, dname string, dtype string, targetId string) (r *DomainTarget, err error) {
	if err = p.sendGetDomainTarget(groupId, dname, dtype, targetId); err != nil {
		return
	}
	return p.recvGetDomainTarget()
}

func (p *AnalysisClient) sendGetDomainTarget(groupId string, dname string, dtype string, targetId string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getDomainTarget", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := AnalysisGetDomainTargetArgs{
		GroupId:  groupId,
		Dname:    dname,
		Dtype:    dtype,
		TargetId: targetId,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *AnalysisClient) recvGetDomainTarget() (value *DomainTarget, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getDomainTarget" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getDomainTarget failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getDomainTarget failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error53 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error54 error
		error54, err = error53.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error54
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getDomainTarget failed: invalid message type")
		return
	}
	result := AnalysisGetDomainTargetResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Ex != nil {
		err = result.Ex
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - GroupId
//  - Skip
//  - Limit
func (p *AnalysisClient) GetAnalysisResultPageList(groupId string, skip int32, limit int32) (r []*AnalysisResult_, err error) {
	if err = p.sendGetAnalysisResultPageList(groupId, skip, limit); err != nil {
		return
	}
	return p.recvGetAnalysisResultPageList()
}

func (p *AnalysisClient) sendGetAnalysisResultPageList(groupId string, skip int32, limit int32) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getAnalysisResultPageList", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := AnalysisGetAnalysisResultPageListArgs{
		GroupId: groupId,
		Skip:    skip,
		Limit:   limit,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *AnalysisClient) recvGetAnalysisResultPageList() (value []*AnalysisResult_, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getAnalysisResultPageList" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getAnalysisResultPageList failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getAnalysisResultPageList failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error55 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error56 error
		error56, err = error55.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error56
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getAnalysisResultPageList failed: invalid message type")
		return
	}
	result := AnalysisGetAnalysisResultPageListResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Ex != nil {
		err = result.Ex
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - ModuleId
//  - TaskId
//  - Arg
func (p *AnalysisClient) ReportTaskProcess(moduleId int32, taskId string, arg *TaskProcessArgs_) (r RetCode, err error) {
	if err = p.sendReportTaskProcess(moduleId, taskId, arg); err != nil {
		return
	}
	return p.recvReportTaskProcess()
}

func (p *AnalysisClient) sendReportTaskProcess(moduleId int32, taskId string, arg *TaskProcessArgs_) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("reportTaskProcess", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := AnalysisReportTaskProcessArgs{
		ModuleId: moduleId,
		TaskId:   taskId,
		Arg:      arg,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *AnalysisClient) recvReportTaskProcess() (value RetCode, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "reportTaskProcess" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "reportTaskProcess failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "reportTaskProcess failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error57 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error58 error
		error58, err = error57.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error58
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "reportTaskProcess failed: invalid message type")
		return
	}
	result := AnalysisReportTaskProcessResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Ex != nil {
		err = result.Ex
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - ModuleId
//  - TaskId
//  - Batchno
//  - ResultList
func (p *AnalysisClient) ReportResult_(moduleId int32, taskId string, batchno string, resultList []*DomainResult_) (r RetCode, err error) {
	if err = p.sendReportResult_(moduleId, taskId, batchno, resultList); err != nil {
		return
	}
	return p.recvReportResult_()
}

func (p *AnalysisClient) sendReportResult_(moduleId int32, taskId string, batchno string, resultList []*DomainResult_) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("reportResult", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := AnalysisReportResultArgs{
		ModuleId:   moduleId,
		TaskId:     taskId,
		Batchno:    batchno,
		ResultList: resultList,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *AnalysisClient) recvReportResult_() (value RetCode, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "reportResult" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "reportResult failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "reportResult failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error59 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error60 error
		error60, err = error59.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error60
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "reportResult failed: invalid message type")
		return
	}
	result := AnalysisReportResultResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Ex != nil {
		err = result.Ex
		return
	}
	value = result.GetSuccess()
	return
}

type AnalysisProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      Analysis
}

func (p *AnalysisProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *AnalysisProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *AnalysisProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewAnalysisProcessor(handler Analysis) *AnalysisProcessor {

	self61 := &AnalysisProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self61.processorMap["getDomainTarget"] = &analysisProcessorGetDomainTarget{handler: handler}
	self61.processorMap["getAnalysisResultPageList"] = &analysisProcessorGetAnalysisResultPageList{handler: handler}
	self61.processorMap["reportTaskProcess"] = &analysisProcessorReportTaskProcess{handler: handler}
	self61.processorMap["reportResult"] = &analysisProcessorReportResult_{handler: handler}
	return self61
}

func (p *AnalysisProcessor) Process(iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x62 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x62.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return false, x62

}

type analysisProcessorGetDomainTarget struct {
	handler Analysis
}

func (p *analysisProcessorGetDomainTarget) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AnalysisGetDomainTargetArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getDomainTarget", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := AnalysisGetDomainTargetResult{}
	var retval *DomainTarget
	var err2 error
	if retval, err2 = p.handler.GetDomainTarget(args.GroupId, args.Dname, args.Dtype, args.TargetId); err2 != nil {
		switch v := err2.(type) {
		case *Xception:
			result.Ex = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getDomainTarget: "+err2.Error())
			oprot.WriteMessageBegin("getDomainTarget", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getDomainTarget", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type analysisProcessorGetAnalysisResultPageList struct {
	handler Analysis
}

func (p *analysisProcessorGetAnalysisResultPageList) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AnalysisGetAnalysisResultPageListArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getAnalysisResultPageList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := AnalysisGetAnalysisResultPageListResult{}
	var retval []*AnalysisResult_
	var err2 error
	if retval, err2 = p.handler.GetAnalysisResultPageList(args.GroupId, args.Skip, args.Limit); err2 != nil {
		switch v := err2.(type) {
		case *Xception:
			result.Ex = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getAnalysisResultPageList: "+err2.Error())
			oprot.WriteMessageBegin("getAnalysisResultPageList", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getAnalysisResultPageList", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type analysisProcessorReportTaskProcess struct {
	handler Analysis
}

func (p *analysisProcessorReportTaskProcess) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AnalysisReportTaskProcessArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("reportTaskProcess", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := AnalysisReportTaskProcessResult{}
	var retval RetCode
	var err2 error
	if retval, err2 = p.handler.ReportTaskProcess(args.ModuleId, args.TaskId, args.Arg); err2 != nil {
		switch v := err2.(type) {
		case *Xception:
			result.Ex = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing reportTaskProcess: "+err2.Error())
			oprot.WriteMessageBegin("reportTaskProcess", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("reportTaskProcess", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type analysisProcessorReportResult_ struct {
	handler Analysis
}

func (p *analysisProcessorReportResult_) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AnalysisReportResultArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("reportResult", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := AnalysisReportResultResult{}
	var retval RetCode
	var err2 error
	if retval, err2 = p.handler.ReportResult_(args.ModuleId, args.TaskId, args.Batchno, args.ResultList); err2 != nil {
		switch v := err2.(type) {
		case *Xception:
			result.Ex = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing reportResult: "+err2.Error())
			oprot.WriteMessageBegin("reportResult", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("reportResult", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - GroupId
//  - Dname
//  - Dtype
//  - TargetId
type AnalysisGetDomainTargetArgs struct {
	GroupId  string `thrift:"groupId,1" json:"groupId"`
	Dname    string `thrift:"dname,2" json:"dname"`
	Dtype    string `thrift:"dtype,3" json:"dtype"`
	TargetId string `thrift:"targetId,4" json:"targetId"`
}

func NewAnalysisGetDomainTargetArgs() *AnalysisGetDomainTargetArgs {
	return &AnalysisGetDomainTargetArgs{}
}

func (p *AnalysisGetDomainTargetArgs) GetGroupId() string {
	return p.GroupId
}

func (p *AnalysisGetDomainTargetArgs) GetDname() string {
	return p.Dname
}

func (p *AnalysisGetDomainTargetArgs) GetDtype() string {
	return p.Dtype
}

func (p *AnalysisGetDomainTargetArgs) GetTargetId() string {
	return p.TargetId
}
func (p *AnalysisGetDomainTargetArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AnalysisGetDomainTargetArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.GroupId = v
	}
	return nil
}

func (p *AnalysisGetDomainTargetArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Dname = v
	}
	return nil
}

func (p *AnalysisGetDomainTargetArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Dtype = v
	}
	return nil
}

func (p *AnalysisGetDomainTargetArgs) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.TargetId = v
	}
	return nil
}

func (p *AnalysisGetDomainTargetArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getDomainTarget_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AnalysisGetDomainTargetArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("groupId", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:groupId: ", p), err)
	}
	if err := oprot.WriteString(string(p.GroupId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.groupId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:groupId: ", p), err)
	}
	return err
}

func (p *AnalysisGetDomainTargetArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("dname", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:dname: ", p), err)
	}
	if err := oprot.WriteString(string(p.Dname)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.dname (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:dname: ", p), err)
	}
	return err
}

func (p *AnalysisGetDomainTargetArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("dtype", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:dtype: ", p), err)
	}
	if err := oprot.WriteString(string(p.Dtype)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.dtype (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:dtype: ", p), err)
	}
	return err
}

func (p *AnalysisGetDomainTargetArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("targetId", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:targetId: ", p), err)
	}
	if err := oprot.WriteString(string(p.TargetId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.targetId (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:targetId: ", p), err)
	}
	return err
}

func (p *AnalysisGetDomainTargetArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AnalysisGetDomainTargetArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ex
type AnalysisGetDomainTargetResult struct {
	Success *DomainTarget `thrift:"success,0" json:"success,omitempty"`
	Ex      *Xception     `thrift:"ex,1" json:"ex,omitempty"`
}

func NewAnalysisGetDomainTargetResult() *AnalysisGetDomainTargetResult {
	return &AnalysisGetDomainTargetResult{}
}

var AnalysisGetDomainTargetResult_Success_DEFAULT *DomainTarget

func (p *AnalysisGetDomainTargetResult) GetSuccess() *DomainTarget {
	if !p.IsSetSuccess() {
		return AnalysisGetDomainTargetResult_Success_DEFAULT
	}
	return p.Success
}

var AnalysisGetDomainTargetResult_Ex_DEFAULT *Xception

func (p *AnalysisGetDomainTargetResult) GetEx() *Xception {
	if !p.IsSetEx() {
		return AnalysisGetDomainTargetResult_Ex_DEFAULT
	}
	return p.Ex
}
func (p *AnalysisGetDomainTargetResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AnalysisGetDomainTargetResult) IsSetEx() bool {
	return p.Ex != nil
}

func (p *AnalysisGetDomainTargetResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AnalysisGetDomainTargetResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &DomainTarget{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *AnalysisGetDomainTargetResult) readField1(iprot thrift.TProtocol) error {
	p.Ex = &Xception{}
	if err := p.Ex.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
	}
	return nil
}

func (p *AnalysisGetDomainTargetResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getDomainTarget_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AnalysisGetDomainTargetResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *AnalysisGetDomainTargetResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetEx() {
		if err := oprot.WriteFieldBegin("ex", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err)
		}
		if err := p.Ex.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err)
		}
	}
	return err
}

func (p *AnalysisGetDomainTargetResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AnalysisGetDomainTargetResult(%+v)", *p)
}

// Attributes:
//  - GroupId
//  - Skip
//  - Limit
type AnalysisGetAnalysisResultPageListArgs struct {
	GroupId string `thrift:"groupId,1" json:"groupId"`
	Skip    int32  `thrift:"skip,2" json:"skip"`
	Limit   int32  `thrift:"limit,3" json:"limit"`
}

func NewAnalysisGetAnalysisResultPageListArgs() *AnalysisGetAnalysisResultPageListArgs {
	return &AnalysisGetAnalysisResultPageListArgs{}
}

func (p *AnalysisGetAnalysisResultPageListArgs) GetGroupId() string {
	return p.GroupId
}

func (p *AnalysisGetAnalysisResultPageListArgs) GetSkip() int32 {
	return p.Skip
}

func (p *AnalysisGetAnalysisResultPageListArgs) GetLimit() int32 {
	return p.Limit
}
func (p *AnalysisGetAnalysisResultPageListArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AnalysisGetAnalysisResultPageListArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.GroupId = v
	}
	return nil
}

func (p *AnalysisGetAnalysisResultPageListArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Skip = v
	}
	return nil
}

func (p *AnalysisGetAnalysisResultPageListArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Limit = v
	}
	return nil
}

func (p *AnalysisGetAnalysisResultPageListArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getAnalysisResultPageList_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AnalysisGetAnalysisResultPageListArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("groupId", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:groupId: ", p), err)
	}
	if err := oprot.WriteString(string(p.GroupId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.groupId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:groupId: ", p), err)
	}
	return err
}

func (p *AnalysisGetAnalysisResultPageListArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("skip", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:skip: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Skip)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.skip (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:skip: ", p), err)
	}
	return err
}

func (p *AnalysisGetAnalysisResultPageListArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("limit", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:limit: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Limit)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.limit (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:limit: ", p), err)
	}
	return err
}

func (p *AnalysisGetAnalysisResultPageListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AnalysisGetAnalysisResultPageListArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ex
type AnalysisGetAnalysisResultPageListResult struct {
	Success []*AnalysisResult_ `thrift:"success,0" json:"success,omitempty"`
	Ex      *Xception          `thrift:"ex,1" json:"ex,omitempty"`
}

func NewAnalysisGetAnalysisResultPageListResult() *AnalysisGetAnalysisResultPageListResult {
	return &AnalysisGetAnalysisResultPageListResult{}
}

var AnalysisGetAnalysisResultPageListResult_Success_DEFAULT []*AnalysisResult_

func (p *AnalysisGetAnalysisResultPageListResult) GetSuccess() []*AnalysisResult_ {
	return p.Success
}

var AnalysisGetAnalysisResultPageListResult_Ex_DEFAULT *Xception

func (p *AnalysisGetAnalysisResultPageListResult) GetEx() *Xception {
	if !p.IsSetEx() {
		return AnalysisGetAnalysisResultPageListResult_Ex_DEFAULT
	}
	return p.Ex
}
func (p *AnalysisGetAnalysisResultPageListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AnalysisGetAnalysisResultPageListResult) IsSetEx() bool {
	return p.Ex != nil
}

func (p *AnalysisGetAnalysisResultPageListResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AnalysisGetAnalysisResultPageListResult) readField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*AnalysisResult_, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		_elem63 := &AnalysisResult_{}
		if err := _elem63.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem63), err)
		}
		p.Success = append(p.Success, _elem63)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *AnalysisGetAnalysisResultPageListResult) readField1(iprot thrift.TProtocol) error {
	p.Ex = &Xception{}
	if err := p.Ex.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
	}
	return nil
}

func (p *AnalysisGetAnalysisResultPageListResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getAnalysisResultPageList_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AnalysisGetAnalysisResultPageListResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *AnalysisGetAnalysisResultPageListResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetEx() {
		if err := oprot.WriteFieldBegin("ex", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err)
		}
		if err := p.Ex.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err)
		}
	}
	return err
}

func (p *AnalysisGetAnalysisResultPageListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AnalysisGetAnalysisResultPageListResult(%+v)", *p)
}

// Attributes:
//  - ModuleId
//  - TaskId
//  - Arg
type AnalysisReportTaskProcessArgs struct {
	ModuleId int32             `thrift:"moduleId,1" json:"moduleId"`
	TaskId   string            `thrift:"taskId,2" json:"taskId"`
	Arg      *TaskProcessArgs_ `thrift:"arg,3" json:"arg"`
}

func NewAnalysisReportTaskProcessArgs() *AnalysisReportTaskProcessArgs {
	return &AnalysisReportTaskProcessArgs{}
}

func (p *AnalysisReportTaskProcessArgs) GetModuleId() int32 {
	return p.ModuleId
}

func (p *AnalysisReportTaskProcessArgs) GetTaskId() string {
	return p.TaskId
}

var AnalysisReportTaskProcessArgs_Arg_DEFAULT *TaskProcessArgs_

func (p *AnalysisReportTaskProcessArgs) GetArg() *TaskProcessArgs_ {
	if !p.IsSetArg() {
		return AnalysisReportTaskProcessArgs_Arg_DEFAULT
	}
	return p.Arg
}
func (p *AnalysisReportTaskProcessArgs) IsSetArg() bool {
	return p.Arg != nil
}

func (p *AnalysisReportTaskProcessArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AnalysisReportTaskProcessArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ModuleId = v
	}
	return nil
}

func (p *AnalysisReportTaskProcessArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.TaskId = v
	}
	return nil
}

func (p *AnalysisReportTaskProcessArgs) readField3(iprot thrift.TProtocol) error {
	p.Arg = &TaskProcessArgs_{}
	if err := p.Arg.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Arg), err)
	}
	return nil
}

func (p *AnalysisReportTaskProcessArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("reportTaskProcess_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AnalysisReportTaskProcessArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("moduleId", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:moduleId: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ModuleId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.moduleId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:moduleId: ", p), err)
	}
	return err
}

func (p *AnalysisReportTaskProcessArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("taskId", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:taskId: ", p), err)
	}
	if err := oprot.WriteString(string(p.TaskId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.taskId (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:taskId: ", p), err)
	}
	return err
}

func (p *AnalysisReportTaskProcessArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("arg", thrift.STRUCT, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:arg: ", p), err)
	}
	if err := p.Arg.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Arg), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:arg: ", p), err)
	}
	return err
}

func (p *AnalysisReportTaskProcessArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AnalysisReportTaskProcessArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ex
type AnalysisReportTaskProcessResult struct {
	Success *RetCode  `thrift:"success,0" json:"success,omitempty"`
	Ex      *Xception `thrift:"ex,1" json:"ex,omitempty"`
}

func NewAnalysisReportTaskProcessResult() *AnalysisReportTaskProcessResult {
	return &AnalysisReportTaskProcessResult{}
}

var AnalysisReportTaskProcessResult_Success_DEFAULT RetCode

func (p *AnalysisReportTaskProcessResult) GetSuccess() RetCode {
	if !p.IsSetSuccess() {
		return AnalysisReportTaskProcessResult_Success_DEFAULT
	}
	return *p.Success
}

var AnalysisReportTaskProcessResult_Ex_DEFAULT *Xception

func (p *AnalysisReportTaskProcessResult) GetEx() *Xception {
	if !p.IsSetEx() {
		return AnalysisReportTaskProcessResult_Ex_DEFAULT
	}
	return p.Ex
}
func (p *AnalysisReportTaskProcessResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AnalysisReportTaskProcessResult) IsSetEx() bool {
	return p.Ex != nil
}

func (p *AnalysisReportTaskProcessResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AnalysisReportTaskProcessResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		temp := RetCode(v)
		p.Success = &temp
	}
	return nil
}

func (p *AnalysisReportTaskProcessResult) readField1(iprot thrift.TProtocol) error {
	p.Ex = &Xception{}
	if err := p.Ex.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
	}
	return nil
}

func (p *AnalysisReportTaskProcessResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("reportTaskProcess_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AnalysisReportTaskProcessResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *AnalysisReportTaskProcessResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetEx() {
		if err := oprot.WriteFieldBegin("ex", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err)
		}
		if err := p.Ex.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err)
		}
	}
	return err
}

func (p *AnalysisReportTaskProcessResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AnalysisReportTaskProcessResult(%+v)", *p)
}

// Attributes:
//  - ModuleId
//  - TaskId
//  - Batchno
//  - ResultList
type AnalysisReportResultArgs struct {
	ModuleId   int32            `thrift:"moduleId,1" json:"moduleId"`
	TaskId     string           `thrift:"taskId,2" json:"taskId"`
	Batchno    string           `thrift:"batchno,3" json:"batchno"`
	ResultList []*DomainResult_ `thrift:"resultList,4" json:"resultList"`
}

func NewAnalysisReportResultArgs() *AnalysisReportResultArgs {
	return &AnalysisReportResultArgs{}
}

func (p *AnalysisReportResultArgs) GetModuleId() int32 {
	return p.ModuleId
}

func (p *AnalysisReportResultArgs) GetTaskId() string {
	return p.TaskId
}

func (p *AnalysisReportResultArgs) GetBatchno() string {
	return p.Batchno
}

func (p *AnalysisReportResultArgs) GetResultList() []*DomainResult_ {
	return p.ResultList
}
func (p *AnalysisReportResultArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AnalysisReportResultArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ModuleId = v
	}
	return nil
}

func (p *AnalysisReportResultArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.TaskId = v
	}
	return nil
}

func (p *AnalysisReportResultArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Batchno = v
	}
	return nil
}

func (p *AnalysisReportResultArgs) readField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*DomainResult_, 0, size)
	p.ResultList = tSlice
	for i := 0; i < size; i++ {
		_elem64 := &DomainResult_{}
		if err := _elem64.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem64), err)
		}
		p.ResultList = append(p.ResultList, _elem64)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *AnalysisReportResultArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("reportResult_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AnalysisReportResultArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("moduleId", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:moduleId: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ModuleId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.moduleId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:moduleId: ", p), err)
	}
	return err
}

func (p *AnalysisReportResultArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("taskId", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:taskId: ", p), err)
	}
	if err := oprot.WriteString(string(p.TaskId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.taskId (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:taskId: ", p), err)
	}
	return err
}

func (p *AnalysisReportResultArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("batchno", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:batchno: ", p), err)
	}
	if err := oprot.WriteString(string(p.Batchno)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.batchno (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:batchno: ", p), err)
	}
	return err
}

func (p *AnalysisReportResultArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("resultList", thrift.LIST, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:resultList: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.ResultList)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.ResultList {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:resultList: ", p), err)
	}
	return err
}

func (p *AnalysisReportResultArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AnalysisReportResultArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ex
type AnalysisReportResultResult struct {
	Success *RetCode  `thrift:"success,0" json:"success,omitempty"`
	Ex      *Xception `thrift:"ex,1" json:"ex,omitempty"`
}

func NewAnalysisReportResultResult() *AnalysisReportResultResult {
	return &AnalysisReportResultResult{}
}

var AnalysisReportResultResult_Success_DEFAULT RetCode

func (p *AnalysisReportResultResult) GetSuccess() RetCode {
	if !p.IsSetSuccess() {
		return AnalysisReportResultResult_Success_DEFAULT
	}
	return *p.Success
}

var AnalysisReportResultResult_Ex_DEFAULT *Xception

func (p *AnalysisReportResultResult) GetEx() *Xception {
	if !p.IsSetEx() {
		return AnalysisReportResultResult_Ex_DEFAULT
	}
	return p.Ex
}
func (p *AnalysisReportResultResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AnalysisReportResultResult) IsSetEx() bool {
	return p.Ex != nil
}

func (p *AnalysisReportResultResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AnalysisReportResultResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		temp := RetCode(v)
		p.Success = &temp
	}
	return nil
}

func (p *AnalysisReportResultResult) readField1(iprot thrift.TProtocol) error {
	p.Ex = &Xception{}
	if err := p.Ex.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ex), err)
	}
	return nil
}

func (p *AnalysisReportResultResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("reportResult_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AnalysisReportResultResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *AnalysisReportResultResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetEx() {
		if err := oprot.WriteFieldBegin("ex", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ex: ", p), err)
		}
		if err := p.Ex.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ex), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ex: ", p), err)
		}
	}
	return err
}

func (p *AnalysisReportResultResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AnalysisReportResultResult(%+v)", *p)
}
